#![allow(
    path_statements,
    unused_imports,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    unused_parens,
    non_shorthand_field_patterns,
    dead_code,
    overflowing_literals,
    unreachable_patterns,
    unused_variables,
    clippy::unknown_clippy_lints,
    clippy::missing_safety_doc,
    clippy::match_single_binding,
    clippy::ptr_arg,
    clippy::redundant_closure,
    clippy::needless_lifetimes,
    clippy::borrowed_box,
    clippy::map_clone,
    clippy::toplevel_ref_arg,
    clippy::double_parens,
    clippy::collapsible_if,
    clippy::clone_on_copy,
    clippy::unused_unit,
    clippy::deref_addrof,
    clippy::clone_on_copy,
    clippy::needless_return,
    clippy::op_ref,
    clippy::match_like_matches_macro,
    clippy::comparison_chain,
    clippy::len_zero,
    clippy::extra_unused_lifetimes
)]

use ::num::One;
use ::std::ops::Deref;

use ::differential_dataflow::collection;
use ::timely::communication;
use ::timely::dataflow::scopes;
use ::timely::worker;

//use ::serde::de::DeserializeOwned;
use ::differential_datalog::ddval::DDValue;
use ::differential_datalog::ddval::DDValConvert;
use ::differential_datalog::program;
use ::differential_datalog::program::TupleTS;
use ::differential_datalog::program::XFormArrangement;
use ::differential_datalog::program::XFormCollection;
use ::differential_datalog::program::Weight;
use ::differential_datalog::record::FromRecord;
use ::differential_datalog::record::IntoRecord;
use ::differential_datalog::record::Mutator;
use ::serde::Deserialize;
use ::serde::Serialize;


// `usize` and `isize` are builtin Rust types; we therefore declare an alias to DDlog's `usize` and
// `isize`.
pub type std_usize = u64;
pub type std_isize = i64;


#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Default, Serialize, Deserialize)]
pub struct UnusedVariables {
    pub name: types__ast::Name,
    pub declared: types__ast::AnyId,
    pub span: types__ast::Span,
    pub file: types__ast::FileId
}
impl abomonation::Abomonation for UnusedVariables{}
::differential_datalog::decl_struct_from_record!(UnusedVariables["outputs::unused_vars::UnusedVariables"]<>, ["outputs::unused_vars::UnusedVariables"][4]{[0]name["name"]: types__ast::Name, [1]declared["declared"]: types__ast::AnyId, [2]span["span"]: types__ast::Span, [3]file["file"]: types__ast::FileId});
::differential_datalog::decl_struct_into_record!(UnusedVariables, ["outputs::unused_vars::UnusedVariables"]<>, name, declared, span, file);
#[rustfmt::skip] ::differential_datalog::decl_record_mutator_struct!(UnusedVariables, <>, name: types__ast::Name, declared: types__ast::AnyId, span: types__ast::Span, file: types__ast::FileId);
impl ::std::fmt::Display for UnusedVariables {
    fn fmt(&self, __formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            UnusedVariables{name,declared,span,file} => {
                __formatter.write_str("outputs::unused_vars::UnusedVariables{")?;
                ::std::fmt::Debug::fmt(name, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(declared, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(span, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(file, __formatter)?;
                __formatter.write_str("}")
            }
        }
    }
}
impl ::std::fmt::Debug for UnusedVariables {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::std::fmt::Display::fmt(&self, f)
    }
}
pub static __Rule_outputs_unused_vars_UnusedVariables_0 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::unused_vars::UnusedVariables[(outputs::unused_vars::UnusedVariables{.name=name, .declared=declared, .span=span, .file=file}: outputs::unused_vars::UnusedVariables)] :- __Prefix_6[((file: ast::FileId), (config: config::Config))], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(scope: var_decls::DeclarationScope), .declared_in=(declared: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(span: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], (not (ast::is_global(declared))), not is_exported::IsExported[(is_exported::IsExported{.file=(file: ast::FileId), .id=(declared: ast::AnyId)}: is_exported::IsExported)], not name_in_scope::NameInScope[(name_in_scope::NameInScope{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(var_decls::hoisted_scope(scope)), .declared=(declared: ast::AnyId)}: name_in_scope::NameInScope)]. */
                                                                                                                                   program::Rule::ArrangementRule {
                                                                                                                                       description: std::borrow::Cow::from( "outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared)."),
                                                                                                                                       arr: ( 5, 0),
                                                                                                                                       xform: XFormArrangement::Join{
                                                                                                                                                  description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))"),
                                                                                                                                                  ffun: None,
                                                                                                                                                  arrangement: (84,4),
                                                                                                                                                  jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                  {
                                                                                                                                                      let (ref file, ref config) = match *<ddlog_std::tuple2<types__ast::FileId, types__config::Config>>::from_ddvalue_ref(__v1) {
                                                                                                                                                          ddlog_std::tuple2(ref file, ref config) => ((*file).clone(), (*config).clone()),
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      let (ref name, ref scope, ref declared, ref span) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                          crate::var_decls::VariableDeclarations{file: _, name: ref name, scope: ref scope, declared_in: ref declared, meta: ref _0_} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                             crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: ddlog_std::Option::Some{x: span}} => ((*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone()),
                                                                                                                                                                                                                                                                                             _ => return None
                                                                                                                                                                                                                                                                                         },
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      if !(!types__ast::is_global(declared)) {return None;};
                                                                                                                                                      Some((ddlog_std::tuple5((*file).clone(), (*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone())).into_ddvalue())
                                                                                                                                                  }
                                                                                                                                                  __f},
                                                                                                                                                  next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                          description: std::borrow::Cow::from("arrange __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))) by (file, declared)"),
                                                                                                                                                                          afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                          {
                                                                                                                                                                              let ddlog_std::tuple5(ref file, ref name, ref scope, ref declared, ref span) = *<ddlog_std::tuple5<types__ast::FileId, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                              Some(((ddlog_std::tuple2((*file).clone(), (*declared).clone())).into_ddvalue(), (ddlog_std::tuple5((*file).clone(), (*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone())).into_ddvalue()))
                                                                                                                                                                          }
                                                                                                                                                                          __f},
                                                                                                                                                                          next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                             description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared)"),
                                                                                                                                                                                             ffun: None,
                                                                                                                                                                                             arrangement: (61,0),
                                                                                                                                                                                             next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                                                                     description: std::borrow::Cow::from("arrange __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::hoisted_scope(scope)), declared)"),
                                                                                                                                                                                                                     afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         let ddlog_std::tuple5(ref file, ref name, ref scope, ref declared, ref span) = *<ddlog_std::tuple5<types__ast::FileId, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                         Some(((ddlog_std::tuple4((*file).clone(), (*name).clone(), crate::var_decls::hoisted_scope(scope), (*declared).clone())).into_ddvalue(), (ddlog_std::tuple4((*file).clone(), (*name).clone(), (*declared).clone(), (*span).clone())).into_ddvalue()))
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     __f},
                                                                                                                                                                                                                     next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                                                                        description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared)"),
                                                                                                                                                                                                                                        ffun: None,
                                                                                                                                                                                                                                        arrangement: (62,2),
                                                                                                                                                                                                                                        next: Box::new(Some(XFormCollection::FilterMap{
                                                                                                                                                                                                                                                                description: std::borrow::Cow::from("head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared)."),
                                                                                                                                                                                                                                                                fmfun: {fn __f(__v: DDValue) -> Option<DDValue>
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    let ddlog_std::tuple4(ref file, ref name, ref declared, ref span) = *<ddlog_std::tuple4<types__ast::FileId, internment::Intern<String>, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                                                                    Some(((UnusedVariables{name: (*name).clone(), declared: (*declared).clone(), span: (*span).clone(), file: (*file).clone()})).into_ddvalue())
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                __f},
                                                                                                                                                                                                                                                                next: Box::new(None)
                                                                                                                                                                                                                                                            }))
                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                 }))
                                                                                                                                                                                         })
                                                                                                                                                                      }))
                                                                                                                                              }
                                                                                                                                   });
pub static __Rule_outputs_unused_vars_UnusedVariables_1 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::unused_vars::UnusedVariables[(outputs::unused_vars::UnusedVariables{.name=name, .declared=declared, .span=span, .file=file}: outputs::unused_vars::UnusedVariables)] :- __Prefix_6[((file: ast::FileId), (config: config::Config))], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(scope: var_decls::DeclarationScope), .declared_in=(declared: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(span: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], not name_in_scope::NameInScope[(name_in_scope::NameInScope{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(var_decls::unhoisted_scope(scope)), .declared=(declared: ast::AnyId)}: name_in_scope::NameInScope)]. */
                                                                                                                                   program::Rule::ArrangementRule {
                                                                                                                                       description: std::borrow::Cow::from( "outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)."),
                                                                                                                                       arr: ( 5, 0),
                                                                                                                                       xform: XFormArrangement::Join{
                                                                                                                                                  description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))"),
                                                                                                                                                  ffun: None,
                                                                                                                                                  arrangement: (84,5),
                                                                                                                                                  jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                  {
                                                                                                                                                      let (ref file, ref config) = match *<ddlog_std::tuple2<types__ast::FileId, types__config::Config>>::from_ddvalue_ref(__v1) {
                                                                                                                                                          ddlog_std::tuple2(ref file, ref config) => ((*file).clone(), (*config).clone()),
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      let (ref name, ref scope, ref declared, ref span) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                          crate::var_decls::VariableDeclarations{file: _, name: ref name, scope: ref scope, declared_in: ref declared, meta: ref _0_} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                             crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: ddlog_std::Option::Some{x: span}} => ((*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone()),
                                                                                                                                                                                                                                                                                             _ => return None
                                                                                                                                                                                                                                                                                         },
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      Some((ddlog_std::tuple5((*file).clone(), (*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone())).into_ddvalue())
                                                                                                                                                  }
                                                                                                                                                  __f},
                                                                                                                                                  next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                          description: std::borrow::Cow::from("arrange __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})) by (file, name, (var_decls::unhoisted_scope(scope)), declared)"),
                                                                                                                                                                          afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                          {
                                                                                                                                                                              let ddlog_std::tuple5(ref file, ref name, ref scope, ref declared, ref span) = *<ddlog_std::tuple5<types__ast::FileId, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                              Some(((ddlog_std::tuple4((*file).clone(), (*name).clone(), crate::var_decls::unhoisted_scope(scope), (*declared).clone())).into_ddvalue(), (ddlog_std::tuple4((*file).clone(), (*name).clone(), (*declared).clone(), (*span).clone())).into_ddvalue()))
                                                                                                                                                                          }
                                                                                                                                                                          __f},
                                                                                                                                                                          next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                             description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)"),
                                                                                                                                                                                             ffun: None,
                                                                                                                                                                                             arrangement: (62,2),
                                                                                                                                                                                             next: Box::new(Some(XFormCollection::FilterMap{
                                                                                                                                                                                                                     description: std::borrow::Cow::from("head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)."),
                                                                                                                                                                                                                     fmfun: {fn __f(__v: DDValue) -> Option<DDValue>
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         let ddlog_std::tuple4(ref file, ref name, ref declared, ref span) = *<ddlog_std::tuple4<types__ast::FileId, internment::Intern<String>, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                         Some(((UnusedVariables{name: (*name).clone(), declared: (*declared).clone(), span: (*span).clone(), file: (*file).clone()})).into_ddvalue())
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     __f},
                                                                                                                                                                                                                     next: Box::new(None)
                                                                                                                                                                                                                 }))
                                                                                                                                                                                         })
                                                                                                                                                                      }))
                                                                                                                                              }
                                                                                                                                   });
pub static __Rule_outputs_unused_vars_UnusedVariables_2 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::unused_vars::UnusedVariables[(outputs::unused_vars::UnusedVariables{.name=name, .declared=declared, .span=span, .file=file}: outputs::unused_vars::UnusedVariables)] :- __Prefix_6[((file: ast::FileId), (config: config::Config))], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(scope: var_decls::DeclarationScope), .declared_in=(declared@ (ast::AnyIdGlobal{.global=(_: ast::GlobalId)}: ast::AnyId)), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(span: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], not is_exported::IsExported[(is_exported::IsExported{.file=(file: ast::FileId), .id=(declared: ast::AnyId)}: is_exported::IsExported)], not name_in_scope::NameInScope[(name_in_scope::NameInScope{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(var_decls::unhoisted_scope(scope)), .declared=(declared: ast::AnyId)}: name_in_scope::NameInScope)]. */
                                                                                                                                   program::Rule::ArrangementRule {
                                                                                                                                       description: std::borrow::Cow::from( "outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)."),
                                                                                                                                       arr: ( 5, 0),
                                                                                                                                       xform: XFormArrangement::Join{
                                                                                                                                                  description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))"),
                                                                                                                                                  ffun: None,
                                                                                                                                                  arrangement: (84,6),
                                                                                                                                                  jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                  {
                                                                                                                                                      let (ref file, ref config) = match *<ddlog_std::tuple2<types__ast::FileId, types__config::Config>>::from_ddvalue_ref(__v1) {
                                                                                                                                                          ddlog_std::tuple2(ref file, ref config) => ((*file).clone(), (*config).clone()),
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      let (ref name, ref scope, ref declared, ref span) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                          crate::var_decls::VariableDeclarations{file: _, name: ref name, scope: ref scope, declared_in: ref declared, meta: ref _0_} => match declared {
                                                                                                                                                                                                                                                                                             types__ast::AnyId::AnyIdGlobal{global: _} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                                                                              crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: ddlog_std::Option::Some{x: span}} => ((*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone()),
                                                                                                                                                                                                                                                                                                                                              _ => return None
                                                                                                                                                                                                                                                                                                                                          },
                                                                                                                                                                                                                                                                                             _ => return None
                                                                                                                                                                                                                                                                                         },
                                                                                                                                                          _ => return None
                                                                                                                                                      };
                                                                                                                                                      Some((ddlog_std::tuple5((*file).clone(), (*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone())).into_ddvalue())
                                                                                                                                                  }
                                                                                                                                                  __f},
                                                                                                                                                  next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                          description: std::borrow::Cow::from("arrange __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})) by (file, declared)"),
                                                                                                                                                                          afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                          {
                                                                                                                                                                              let ddlog_std::tuple5(ref file, ref name, ref scope, ref declared, ref span) = *<ddlog_std::tuple5<types__ast::FileId, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                              Some(((ddlog_std::tuple2((*file).clone(), (*declared).clone())).into_ddvalue(), (ddlog_std::tuple5((*file).clone(), (*name).clone(), (*scope).clone(), (*declared).clone(), (*span).clone())).into_ddvalue()))
                                                                                                                                                                          }
                                                                                                                                                                          __f},
                                                                                                                                                                          next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                             description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not is_exported::IsExported(.file=file, .id=declared)"),
                                                                                                                                                                                             ffun: None,
                                                                                                                                                                                             arrangement: (61,0),
                                                                                                                                                                                             next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                                                                     description: std::borrow::Cow::from("arrange __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::unhoisted_scope(scope)), declared)"),
                                                                                                                                                                                                                     afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                         let ddlog_std::tuple5(ref file, ref name, ref scope, ref declared, ref span) = *<ddlog_std::tuple5<types__ast::FileId, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                         Some(((ddlog_std::tuple4((*file).clone(), (*name).clone(), crate::var_decls::unhoisted_scope(scope), (*declared).clone())).into_ddvalue(), (ddlog_std::tuple4((*file).clone(), (*name).clone(), (*declared).clone(), (*span).clone())).into_ddvalue()))
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     __f},
                                                                                                                                                                                                                     next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                                                                        description: std::borrow::Cow::from("__Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)"),
                                                                                                                                                                                                                                        ffun: None,
                                                                                                                                                                                                                                        arrangement: (62,2),
                                                                                                                                                                                                                                        next: Box::new(Some(XFormCollection::FilterMap{
                                                                                                                                                                                                                                                                description: std::borrow::Cow::from("head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- __Prefix_6[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared)."),
                                                                                                                                                                                                                                                                fmfun: {fn __f(__v: DDValue) -> Option<DDValue>
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                    let ddlog_std::tuple4(ref file, ref name, ref declared, ref span) = *<ddlog_std::tuple4<types__ast::FileId, internment::Intern<String>, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                                                                    Some(((UnusedVariables{name: (*name).clone(), declared: (*declared).clone(), span: (*span).clone(), file: (*file).clone()})).into_ddvalue())
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                __f},
                                                                                                                                                                                                                                                                next: Box::new(None)
                                                                                                                                                                                                                                                            }))
                                                                                                                                                                                                                                    })
                                                                                                                                                                                                                 }))
                                                                                                                                                                                         })
                                                                                                                                                                      }))
                                                                                                                                              }
                                                                                                                                   });