#![allow(
    path_statements,
    unused_imports,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    unused_parens,
    non_shorthand_field_patterns,
    dead_code,
    overflowing_literals,
    unreachable_patterns,
    unused_variables,
    clippy::unknown_clippy_lints,
    clippy::missing_safety_doc,
    clippy::match_single_binding,
    clippy::ptr_arg,
    clippy::redundant_closure,
    clippy::needless_lifetimes,
    clippy::borrowed_box,
    clippy::map_clone,
    clippy::toplevel_ref_arg,
    clippy::double_parens,
    clippy::collapsible_if,
    clippy::clone_on_copy,
    clippy::unused_unit,
    clippy::deref_addrof,
    clippy::clone_on_copy,
    clippy::needless_return,
    clippy::op_ref,
    clippy::match_like_matches_macro,
    clippy::comparison_chain,
    clippy::len_zero,
    clippy::extra_unused_lifetimes
)]

use ::num::One;
use ::std::ops::Deref;

use ::differential_dataflow::collection;
use ::timely::communication;
use ::timely::dataflow::scopes;
use ::timely::worker;

//use ::serde::de::DeserializeOwned;
use ::differential_datalog::ddval::DDValue;
use ::differential_datalog::ddval::DDValConvert;
use ::differential_datalog::program;
use ::differential_datalog::program::TupleTS;
use ::differential_datalog::program::XFormArrangement;
use ::differential_datalog::program::XFormCollection;
use ::differential_datalog::program::Weight;
use ::differential_datalog::record::FromRecord;
use ::differential_datalog::record::IntoRecord;
use ::differential_datalog::record::Mutator;
use ::serde::Deserialize;
use ::serde::Serialize;


// `usize` and `isize` are builtin Rust types; we therefore declare an alias to DDlog's `usize` and
// `isize`.
pub type std_usize = u64;
pub type std_isize = i64;


#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Default, Serialize, Deserialize)]
pub struct DeclarationVisibleWithin {
    pub file: types__ast::FileId,
    pub scope: types__ast::ScopeId,
    pub declaration: types__ast::AnyId
}
impl abomonation::Abomonation for DeclarationVisibleWithin{}
::differential_datalog::decl_struct_from_record!(DeclarationVisibleWithin["outputs::no_shadow::DeclarationVisibleWithin"]<>, ["outputs::no_shadow::DeclarationVisibleWithin"][3]{[0]file["file"]: types__ast::FileId, [1]scope["scope"]: types__ast::ScopeId, [2]declaration["declaration"]: types__ast::AnyId});
::differential_datalog::decl_struct_into_record!(DeclarationVisibleWithin, ["outputs::no_shadow::DeclarationVisibleWithin"]<>, file, scope, declaration);
#[rustfmt::skip] ::differential_datalog::decl_record_mutator_struct!(DeclarationVisibleWithin, <>, file: types__ast::FileId, scope: types__ast::ScopeId, declaration: types__ast::AnyId);
impl ::std::fmt::Display for DeclarationVisibleWithin {
    fn fmt(&self, __formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DeclarationVisibleWithin{file,scope,declaration} => {
                __formatter.write_str("outputs::no_shadow::DeclarationVisibleWithin{")?;
                ::std::fmt::Debug::fmt(file, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(scope, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(declaration, __formatter)?;
                __formatter.write_str("}")
            }
        }
    }
}
impl ::std::fmt::Debug for DeclarationVisibleWithin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::std::fmt::Display::fmt(&self, f)
    }
}
#[derive(Eq, Ord, Clone, Hash, PartialEq, PartialOrd, Default, Serialize, Deserialize)]
pub struct NoShadow {
    pub variable: types__ast::Name,
    pub original: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>,
    pub shadower: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>,
    pub implicit: bool,
    pub file: types__ast::FileId
}
impl abomonation::Abomonation for NoShadow{}
::differential_datalog::decl_struct_from_record!(NoShadow["outputs::no_shadow::NoShadow"]<>, ["outputs::no_shadow::NoShadow"][5]{[0]variable["variable"]: types__ast::Name, [1]original["original"]: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>, [2]shadower["shadower"]: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>, [3]implicit["implicit"]: bool, [4]file["file"]: types__ast::FileId});
::differential_datalog::decl_struct_into_record!(NoShadow, ["outputs::no_shadow::NoShadow"]<>, variable, original, shadower, implicit, file);
#[rustfmt::skip] ::differential_datalog::decl_record_mutator_struct!(NoShadow, <>, variable: types__ast::Name, original: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>, shadower: ddlog_std::tuple2<types__ast::AnyId, types__ast::Span>, implicit: bool, file: types__ast::FileId);
impl ::std::fmt::Display for NoShadow {
    fn fmt(&self, __formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            NoShadow{variable,original,shadower,implicit,file} => {
                __formatter.write_str("outputs::no_shadow::NoShadow{")?;
                ::std::fmt::Debug::fmt(variable, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(original, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(shadower, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(implicit, __formatter)?;
                __formatter.write_str(",")?;
                ::std::fmt::Debug::fmt(file, __formatter)?;
                __formatter.write_str("}")
            }
        }
    }
}
impl ::std::fmt::Debug for NoShadow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::std::fmt::Display::fmt(&self, f)
    }
}
pub static __Arng_outputs_no_shadow_DeclarationVisibleWithin_0 : ::once_cell::sync::Lazy<program::Arrangement> = ::once_cell::sync::Lazy::new(|| program::Arrangement::Map{
                                                                                                                                                    name: std::borrow::Cow::from(r###"(outputs::no_shadow::DeclarationVisibleWithin{.file=(_1: ast::FileId), .scope=(_0: ast::ScopeId), .declaration=(_: ast::AnyId)}: outputs::no_shadow::DeclarationVisibleWithin) /*join*/"###),
                                                                                                                                                     afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                     {
                                                                                                                                                         let __cloned = __v.clone();
                                                                                                                                                         match < DeclarationVisibleWithin>::from_ddvalue(__v) {
                                                                                                                                                             DeclarationVisibleWithin{file: ref _1, scope: ref _0, declaration: _} => Some((ddlog_std::tuple2((*_0).clone(), (*_1).clone())).into_ddvalue()),
                                                                                                                                                             _ => None
                                                                                                                                                         }.map(|x|(x,__cloned))
                                                                                                                                                     }
                                                                                                                                                     __f},
                                                                                                                                                     queryable: false
                                                                                                                                                 });
pub static __Arng_outputs_no_shadow_DeclarationVisibleWithin_1 : ::once_cell::sync::Lazy<program::Arrangement> = ::once_cell::sync::Lazy::new(|| program::Arrangement::Map{
                                                                                                                                                    name: std::borrow::Cow::from(r###"(outputs::no_shadow::DeclarationVisibleWithin{.file=(_0: ast::FileId), .scope=(_1: ast::ScopeId), .declaration=(_: ast::AnyId)}: outputs::no_shadow::DeclarationVisibleWithin) /*join*/"###),
                                                                                                                                                     afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                     {
                                                                                                                                                         let __cloned = __v.clone();
                                                                                                                                                         match < DeclarationVisibleWithin>::from_ddvalue(__v) {
                                                                                                                                                             DeclarationVisibleWithin{file: ref _0, scope: ref _1, declaration: _} => Some((ddlog_std::tuple2((*_0).clone(), (*_1).clone())).into_ddvalue()),
                                                                                                                                                             _ => None
                                                                                                                                                         }.map(|x|(x,__cloned))
                                                                                                                                                     }
                                                                                                                                                     __f},
                                                                                                                                                     queryable: false
                                                                                                                                                 });
pub static __Rule_outputs_no_shadow_DeclarationVisibleWithin_0 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::no_shadow::DeclarationVisibleWithin[(outputs::no_shadow::DeclarationVisibleWithin{.file=file, .scope=scope, .declaration=declaration}: outputs::no_shadow::DeclarationVisibleWithin)] :- __Prefix_9[((file: ast::FileId), (config: config::Config))], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(_: internment::Intern<string>), .scope=(decl_scope: var_decls::DeclarationScope), .declared_in=(declaration: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(_: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], (not (ast::is_global(declaration))), ((var scope: ast::ScopeId) = if (config::no_shadow_hoisting(config)) {
var_decls::hoisted_scope(decl_scope))
} else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (var_decls::unhoisted_scope(decl_scope))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           }). */
                                                                                                                                          program::Rule::ArrangementRule {
                                                                                                                                              description: std::borrow::Cow::from( "outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration) :- __Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=_, .scope=decl_scope, .declared_in=declaration, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=_})), (not (ast::is_global(declaration))), (var scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                                                                                                                     (var_decls::hoisted_scope(decl_scope))\n                                                                                                                                                                                                                                                                                                                                                                                                 } else {\n                                                                                                                                                                                                                                                                                                                                                                                                       (var_decls::unhoisted_scope(decl_scope))\n                                                                                                                                                                                                                                                                                                                                                                                                   })."),
                                                                                                                                              arr: ( 7, 0),
                                                                                                                                              xform: XFormArrangement::Join{
                                                                                                                                                         description: std::borrow::Cow::from("__Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=_, .scope=decl_scope, .declared_in=declaration, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=_}))"),
                                                                                                                                                         ffun: None,
                                                                                                                                                         arrangement: (84,1),
                                                                                                                                                         jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                         {
                                                                                                                                                             let (ref file, ref config) = match *<ddlog_std::tuple2<types__ast::FileId, types__config::Config>>::from_ddvalue_ref(__v1) {
                                                                                                                                                                 ddlog_std::tuple2(ref file, ref config) => ((*file).clone(), (*config).clone()),
                                                                                                                                                                 _ => return None
                                                                                                                                                             };
                                                                                                                                                             let (ref decl_scope, ref declaration) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                                 crate::var_decls::VariableDeclarations{file: _, name: _, scope: ref decl_scope, declared_in: ref declaration, meta: ref _0_} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                                     crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: _} => ((*decl_scope).clone(), (*declaration).clone()),
                                                                                                                                                                                                                                                                                                     _ => return None
                                                                                                                                                                                                                                                                                                 },
                                                                                                                                                                 _ => return None
                                                                                                                                                             };
                                                                                                                                                             if !(!types__ast::is_global(declaration)) {return None;};
                                                                                                                                                             let ref scope: types__ast::ScopeId = match if types__config::no_shadow_hoisting(config) {
                                                                                                                                                                                                            crate::var_decls::hoisted_scope(decl_scope)
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                            crate::var_decls::unhoisted_scope(decl_scope)
                                                                                                                                                                                                        } {
                                                                                                                                                                 scope => scope,
                                                                                                                                                                 _ => return None
                                                                                                                                                             };
                                                                                                                                                             Some(((DeclarationVisibleWithin{file: (*file).clone(), scope: (*scope).clone(), declaration: (*declaration).clone()})).into_ddvalue())
                                                                                                                                                         }
                                                                                                                                                         __f},
                                                                                                                                                         next: Box::new(None)
                                                                                                                                                     }
                                                                                                                                          });
pub static __Rule_outputs_no_shadow_DeclarationVisibleWithin_1 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::no_shadow::DeclarationVisibleWithin[(outputs::no_shadow::DeclarationVisibleWithin{.file=file, .scope=child, .declaration=declaration}: outputs::no_shadow::DeclarationVisibleWithin)] :- outputs::no_shadow::DeclarationVisibleWithin[(outputs::no_shadow::DeclarationVisibleWithin{.file=(file: ast::FileId), .scope=(scope: ast::ScopeId), .declaration=(declaration: ast::AnyId)}: outputs::no_shadow::DeclarationVisibleWithin)], inputs::InputScope[(inputs::InputScope{.parent=(scope: ast::ScopeId), .child=(child: ast::ScopeId), .file=(file: ast::FileId)}: inputs::InputScope)], not name_in_scope::ScopeOfDeclName[(name_in_scope::ScopeOfDeclName{.file=(file: ast::FileId), .name=(_: internment::Intern<string>), .scope=(child: ast::ScopeId), .declared=(declaration: ast::AnyId)}: name_in_scope::ScopeOfDeclName)]. */
                                                                                                                                          program::Rule::ArrangementRule {
                                                                                                                                              description: std::borrow::Cow::from( "outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=child, .declaration=declaration) :- outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration), inputs::InputScope(.parent=scope, .child=child, .file=file), not name_in_scope::ScopeOfDeclName(.file=file, .name=_, .scope=child, .declared=declaration)."),
                                                                                                                                              arr: ( 65, 0),
                                                                                                                                              xform: XFormArrangement::Join{
                                                                                                                                                         description: std::borrow::Cow::from("outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration), inputs::InputScope(.parent=scope, .child=child, .file=file)"),
                                                                                                                                                         ffun: None,
                                                                                                                                                         arrangement: (41,1),
                                                                                                                                                         jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                         {
                                                                                                                                                             let (ref file, ref scope, ref declaration) = match *<DeclarationVisibleWithin>::from_ddvalue_ref(__v1) {
                                                                                                                                                                 DeclarationVisibleWithin{file: ref file, scope: ref scope, declaration: ref declaration} => ((*file).clone(), (*scope).clone(), (*declaration).clone()),
                                                                                                                                                                 _ => return None
                                                                                                                                                             };
                                                                                                                                                             let ref child = match *<types__inputs::InputScope>::from_ddvalue_ref(__v2) {
                                                                                                                                                                 types__inputs::InputScope{parent: _, child: ref child, file: _} => (*child).clone(),
                                                                                                                                                                 _ => return None
                                                                                                                                                             };
                                                                                                                                                             Some((ddlog_std::tuple3((*file).clone(), (*declaration).clone(), (*child).clone())).into_ddvalue())
                                                                                                                                                         }
                                                                                                                                                         __f},
                                                                                                                                                         next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                                 description: std::borrow::Cow::from("arrange outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration), inputs::InputScope(.parent=scope, .child=child, .file=file) by (file, child, declaration)"),
                                                                                                                                                                                 afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                                 {
                                                                                                                                                                                     let ddlog_std::tuple3(ref file, ref declaration, ref child) = *<ddlog_std::tuple3<types__ast::FileId, types__ast::AnyId, types__ast::ScopeId>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                     Some(((ddlog_std::tuple3((*file).clone(), (*child).clone(), (*declaration).clone())).into_ddvalue(), (ddlog_std::tuple3((*file).clone(), (*declaration).clone(), (*child).clone())).into_ddvalue()))
                                                                                                                                                                                 }
                                                                                                                                                                                 __f},
                                                                                                                                                                                 next: Box::new(XFormArrangement::Antijoin {
                                                                                                                                                                                                    description: std::borrow::Cow::from("outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration), inputs::InputScope(.parent=scope, .child=child, .file=file), not name_in_scope::ScopeOfDeclName(.file=file, .name=_, .scope=child, .declared=declaration)"),
                                                                                                                                                                                                    ffun: None,
                                                                                                                                                                                                    arrangement: (64,1),
                                                                                                                                                                                                    next: Box::new(Some(XFormCollection::FilterMap{
                                                                                                                                                                                                                            description: std::borrow::Cow::from("head of outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=child, .declaration=declaration) :- outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=scope, .declaration=declaration), inputs::InputScope(.parent=scope, .child=child, .file=file), not name_in_scope::ScopeOfDeclName(.file=file, .name=_, .scope=child, .declared=declaration)."),
                                                                                                                                                                                                                            fmfun: {fn __f(__v: DDValue) -> Option<DDValue>
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                let ddlog_std::tuple3(ref file, ref declaration, ref child) = *<ddlog_std::tuple3<types__ast::FileId, types__ast::AnyId, types__ast::ScopeId>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                                Some(((DeclarationVisibleWithin{file: (*file).clone(), scope: (*child).clone(), declaration: (*declaration).clone()})).into_ddvalue())
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            __f},
                                                                                                                                                                                                                            next: Box::new(None)
                                                                                                                                                                                                                        }))
                                                                                                                                                                                                })
                                                                                                                                                                             }))
                                                                                                                                                     }
                                                                                                                                          });
pub static __Rule_outputs_no_shadow_NoShadow_0 : ::once_cell::sync::Lazy<program::Rule> = ::once_cell::sync::Lazy::new(|| /* outputs::no_shadow::NoShadow[(outputs::no_shadow::NoShadow{.variable=name, .original=(shadowed_id, shadowed_span), .shadower=(shadower_id, shadower_span), .implicit=false, .file=file}: outputs::no_shadow::NoShadow)] :- __Prefix_9[((file: ast::FileId), (config: config::Config))], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(scope: var_decls::DeclarationScope), .declared_in=(shadower_id: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(shadower_span: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], ((var shadower_scope: ast::ScopeId) = if (config::no_shadow_hoisting(config)) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     (var_decls::hoisted_scope(scope))
} else {
var_decls::unhoisted_scope(scope))
}), outputs::no_shadow::DeclarationVisibleWithin[(outputs::no_shadow::DeclarationVisibleWithin{.file=(file: ast::FileId), .scope=(shadower_scope: ast::ScopeId), .declaration=(shadowed_id: ast::AnyId)}: outputs::no_shadow::DeclarationVisibleWithin)], (shadowed_id != shadower_id), inputs::InputScope[(inputs::InputScope{.parent=(parent_scope: ast::ScopeId), .child=(child_scope: ast::ScopeId), .file=(file: ast::FileId)}: inputs::InputScope)], var_decls::VariableDeclarations[(var_decls::VariableDeclarations{.file=(file: ast::FileId), .name=(name: internment::Intern<string>), .scope=(shadowed_scope: var_decls::DeclarationScope), .declared_in=(shadowed_id: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(shadowed_span: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations)], (child_scope == if (config::no_shadow_hoisting(config)) {
var_decls::hoisted_scope(shadowed_scope))
} else {
var_decls::unhoisted_scope(shadowed_scope))
}), match (((config::no_shadow_hoisting(config)), (var_decls::is_hoistable(scope)), (var_decls::is_hoistable(shadowed_scope)))) {
true, true, true) -> (shadower_span < shadowed_span),
true, false, true) -> (shadower_span < shadowed_span),
true, true, false) -> (shadower_span < shadowed_span),
bool), (_: bool), (_: bool)) -> true
}. */
                                                                                                                          program::Rule::ArrangementRule {
                                                                                                                              description: std::borrow::Cow::from( "outputs::no_shadow::NoShadow(.variable=name, .original=(shadowed_id, shadowed_span), .shadower=(shadower_id, shadower_span), .implicit=false, .file=file) :- __Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            } else {\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                                                                                                                                                                              }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id), (shadowed_id != shadower_id), inputs::InputScope(.parent=parent_scope, .child=child_scope, .file=file), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), (child_scope == if (config::no_shadow_hoisting(config)) {\nvar_decls::hoisted_scope(shadowed_scope))\n} else {\nvar_decls::unhoisted_scope(shadowed_scope))\n}), match (((config::no_shadow_hoisting(config)), (var_decls::is_hoistable(scope)), (var_decls::is_hoistable(shadowed_scope)))) {\ntrue, true, true) -> (shadower_span < shadowed_span),\ntrue, false, true) -> (shadower_span < shadowed_span),\ntrue, true, false) -> (shadower_span < shadowed_span),\ntrue\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 }."),
                                                                                                                              arr: ( 7, 0),
                                                                                                                              xform: XFormArrangement::Join{
                                                                                                                                         description: std::borrow::Cow::from("__Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}}))"),
                                                                                                                                         ffun: None,
                                                                                                                                         arrangement: (84,2),
                                                                                                                                         jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                         {
                                                                                                                                             let (ref file, ref config) = match *<ddlog_std::tuple2<types__ast::FileId, types__config::Config>>::from_ddvalue_ref(__v1) {
                                                                                                                                                 ddlog_std::tuple2(ref file, ref config) => ((*file).clone(), (*config).clone()),
                                                                                                                                                 _ => return None
                                                                                                                                             };
                                                                                                                                             let (ref name, ref scope, ref shadower_id, ref shadower_span) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                 crate::var_decls::VariableDeclarations{file: _, name: ref name, scope: ref scope, declared_in: ref shadower_id, meta: ref _0_} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                       crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: ddlog_std::Option::Some{x: shadower_span}} => ((*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone()),
                                                                                                                                                                                                                                                                                       _ => return None
                                                                                                                                                                                                                                                                                   },
                                                                                                                                                 _ => return None
                                                                                                                                             };
                                                                                                                                             let ref shadower_scope: types__ast::ScopeId = match if types__config::no_shadow_hoisting(config) {
                                                                                                                                                                                                     crate::var_decls::hoisted_scope(scope)
                                                                                                                                                                                                 } else {
                                                                                                                                                                                                     crate::var_decls::unhoisted_scope(scope)
                                                                                                                                                                                                 } {
                                                                                                                                                 shadower_scope => shadower_scope,
                                                                                                                                                 _ => return None
                                                                                                                                             };
                                                                                                                                             Some((ddlog_std::tuple7((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone(), (*shadower_scope).clone())).into_ddvalue())
                                                                                                                                         }
                                                                                                                                         __f},
                                                                                                                                         next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                 description: std::borrow::Cow::from("arrange __Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                           (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                       } else {\n                                                                                                                                                                                                                                                                                                             (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                         }) by (file, shadower_scope)"),
                                                                                                                                                                 afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                 {
                                                                                                                                                                     let ddlog_std::tuple7(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span, ref shadower_scope) = *<ddlog_std::tuple7<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span, types__ast::ScopeId>>::from_ddvalue_ref( &__v );
                                                                                                                                                                     Some(((ddlog_std::tuple2((*file).clone(), (*shadower_scope).clone())).into_ddvalue(), (ddlog_std::tuple6((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone())).into_ddvalue()))
                                                                                                                                                                 }
                                                                                                                                                                 __f},
                                                                                                                                                                 next: Box::new(XFormArrangement::Join{
                                                                                                                                                                                    description: std::borrow::Cow::from("__Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                   (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                               } else {\n                                                                                                                                                                                                                                                                                                     (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                 }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id)"),
                                                                                                                                                                                    ffun: None,
                                                                                                                                                                                    arrangement: (65,1),
                                                                                                                                                                                    jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                                                    {
                                                                                                                                                                                        let ddlog_std::tuple6(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span) = *<ddlog_std::tuple6<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span>>::from_ddvalue_ref( __v1 );
                                                                                                                                                                                        let ref shadowed_id = match *<DeclarationVisibleWithin>::from_ddvalue_ref(__v2) {
                                                                                                                                                                                            DeclarationVisibleWithin{file: _, scope: _, declaration: ref shadowed_id} => (*shadowed_id).clone(),
                                                                                                                                                                                            _ => return None
                                                                                                                                                                                        };
                                                                                                                                                                                        if !((&*shadowed_id) != (&*shadower_id)) {return None;};
                                                                                                                                                                                        Some((ddlog_std::tuple7((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone(), (*shadowed_id).clone())).into_ddvalue())
                                                                                                                                                                                    }
                                                                                                                                                                                    __f},
                                                                                                                                                                                    next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                                                            description: std::borrow::Cow::from("arrange __Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                           (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                       } else {\n                                                                                                                                                                                                                                                                                                             (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                         }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id), (shadowed_id != shadower_id) by (file)"),
                                                                                                                                                                                                            afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                                                            {
                                                                                                                                                                                                                let ddlog_std::tuple7(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span, ref shadowed_id) = *<ddlog_std::tuple7<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span, types__ast::AnyId>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                Some((((*file).clone()).into_ddvalue(), (ddlog_std::tuple7((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone(), (*shadowed_id).clone())).into_ddvalue()))
                                                                                                                                                                                                            }
                                                                                                                                                                                                            __f},
                                                                                                                                                                                                            next: Box::new(XFormArrangement::Join{
                                                                                                                                                                                                                               description: std::borrow::Cow::from("__Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                   (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                               } else {\n                                                                                                                                                                                                                                                                                                     (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                 }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id), (shadowed_id != shadower_id), inputs::InputScope(.parent=parent_scope, .child=child_scope, .file=file)"),
                                                                                                                                                                                                                               ffun: None,
                                                                                                                                                                                                                               arrangement: (41,2),
                                                                                                                                                                                                                               jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                   let ddlog_std::tuple7(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span, ref shadowed_id) = *<ddlog_std::tuple7<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span, types__ast::AnyId>>::from_ddvalue_ref( __v1 );
                                                                                                                                                                                                                                   let (ref parent_scope, ref child_scope) = match *<types__inputs::InputScope>::from_ddvalue_ref(__v2) {
                                                                                                                                                                                                                                       types__inputs::InputScope{parent: ref parent_scope, child: ref child_scope, file: _} => ((*parent_scope).clone(), (*child_scope).clone()),
                                                                                                                                                                                                                                       _ => return None
                                                                                                                                                                                                                                   };
                                                                                                                                                                                                                                   Some((ddlog_std::tuple8((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone(), (*shadowed_id).clone(), (*child_scope).clone())).into_ddvalue())
                                                                                                                                                                                                                               }
                                                                                                                                                                                                                               __f},
                                                                                                                                                                                                                               next: Box::new(Some(XFormCollection::Arrange {
                                                                                                                                                                                                                                                       description: std::borrow::Cow::from("arrange __Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                           (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                       } else {\n                                                                                                                                                                                                                                                                                                             (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                         }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id), (shadowed_id != shadower_id), inputs::InputScope(.parent=parent_scope, .child=child_scope, .file=file) by (file, name, shadowed_id)"),
                                                                                                                                                                                                                                                       afun: {fn __f(__v: DDValue) -> Option<(DDValue,DDValue)>
                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                           let ddlog_std::tuple8(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span, ref shadowed_id, ref child_scope) = *<ddlog_std::tuple8<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span, types__ast::AnyId, types__ast::ScopeId>>::from_ddvalue_ref( &__v );
                                                                                                                                                                                                                                                           Some(((ddlog_std::tuple3((*file).clone(), (*name).clone(), (*shadowed_id).clone())).into_ddvalue(), (ddlog_std::tuple8((*file).clone(), (*config).clone(), (*name).clone(), (*scope).clone(), (*shadower_id).clone(), (*shadower_span).clone(), (*shadowed_id).clone(), (*child_scope).clone())).into_ddvalue()))
                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                       __f},
                                                                                                                                                                                                                                                       next: Box::new(XFormArrangement::Join{
                                                                                                                                                                                                                                                                          description: std::borrow::Cow::from("__Prefix_9[(file, config)], var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})), (var shadower_scope = if (config::no_shadow_hoisting(config)) {\n                                                                                                                                                                                                                                                                                                   (var_decls::hoisted_scope(scope))\n                                                                                                                                                                                                                                                                                               } else {\n                                                                                                                                                                                                                                                                                                     (var_decls::unhoisted_scope(scope))\n                                                                                                                                                                                                                                                                                                 }), outputs::no_shadow::DeclarationVisibleWithin(.file=file, .scope=shadower_scope, .declaration=shadowed_id), (shadowed_id != shadower_id), inputs::InputScope(.parent=parent_scope, .child=child_scope, .file=file), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}}))"),
                                                                                                                                                                                                                                                                          ffun: None,
                                                                                                                                                                                                                                                                          arrangement: (84,3),
                                                                                                                                                                                                                                                                          jfun: {fn __f(_: &DDValue ,__v1: &DDValue,__v2: &DDValue) -> Option<DDValue>
                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                              let ddlog_std::tuple8(ref file, ref config, ref name, ref scope, ref shadower_id, ref shadower_span, ref shadowed_id, ref child_scope) = *<ddlog_std::tuple8<types__ast::FileId, types__config::Config, internment::Intern<String>, crate::var_decls::DeclarationScope, types__ast::AnyId, types__ast::Span, types__ast::AnyId, types__ast::ScopeId>>::from_ddvalue_ref( __v1 );
                                                                                                                                                                                                                                                                              let (ref shadowed_scope, ref shadowed_span) = match *<crate::var_decls::VariableDeclarations>::from_ddvalue_ref(__v2) {
                                                                                                                                                                                                                                                                                  crate::var_decls::VariableDeclarations{file: _, name: _, scope: ref shadowed_scope, declared_in: _, meta: ref _0_} => match ((*_0_)).deref() {
                                                                                                                                                                                                                                                                                                                                                                                                            crate::var_decls::VariableMeta{is_function_argument: _, implicitly_declared: _, declaration_span: ddlog_std::Option::Some{x: shadowed_span}} => ((*shadowed_scope).clone(), (*shadowed_span).clone()),
                                                                                                                                                                                                                                                                                                                                                                                                            _ => return None
                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                  _ => return None
                                                                                                                                                                                                                                                                              };
                                                                                                                                                                                                                                                                              if !((&*child_scope) == (&*(&if types__config::no_shadow_hoisting(config) {
                                                                                                                                                                                                                                                                                                               crate::var_decls::hoisted_scope(shadowed_scope)
                                                                                                                                                                                                                                                                                                           } else {
                                                                                                                                                                                                                                                                                                               crate::var_decls::unhoisted_scope(shadowed_scope)
                                                                                                                                                                                                                                                                                                           }))) {return None;};
                                                                                                                                                                                                                                                                              if !match ddlog_std::tuple3(types__config::no_shadow_hoisting(config), crate::var_decls::is_hoistable(scope), crate::var_decls::is_hoistable(shadowed_scope)) {
                                                                                                                                                                                                                                                                                      ddlog_std::tuple3(true, true, true) => ((&*shadower_span) < (&*shadowed_span)),
                                                                                                                                                                                                                                                                                      ddlog_std::tuple3(true, false, true) => ((&*shadower_span) < (&*shadowed_span)),
                                                                                                                                                                                                                                                                                      ddlog_std::tuple3(true, true, false) => ((&*shadower_span) < (&*shadowed_span)),
                                                                                                                                                                                                                                                                                      ddlog_std::tuple3(_, _, _) => true
                                                                                                                                                                                                                                                                                  } {return None;};
                                                                                                                                                                                                                                                                              Some(((NoShadow{variable: (*name).clone(), original: ddlog_std::tuple2((*shadowed_id).clone(), (*shadowed_span).clone()), shadower: ddlog_std::tuple2((*shadower_id).clone(), (*shadower_span).clone()), implicit: false, file: (*file).clone()})).into_ddvalue())
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          __f},
                                                                                                                                                                                                                                                                          next: Box::new(None)
                                                                                                                                                                                                                                                                      })
                                                                                                                                                                                                                                                   }))
                                                                                                                                                                                                                           })
                                                                                                                                                                                                        }))
                                                                                                                                                                                })
                                                                                                                                                             }))
                                                                                                                                     }
                                                                                                                          });