import ast
import vec
import utils
import scopes
import inputs
import config
import var_decls
import name_in_scope

output relation NoShadow(
    variable: Name,
    original: (AnyId, Span),
    shadower: (AnyId, Span),
    implicit: bool,
    file: FileId,
)

NoShadow(name, (shadowed_id, shadowed_span), (shadower_id, shadower_span), false, file) :-
    File(file, _, _, config),
    config.no_shadow_enabled(),

    // Get the initial variable
    VariableDeclarations(
        file,
        name,
        scope,
        shadower_id,
        &VariableMeta {
            .implicitly_declared = false,
            .declaration_span = Some { shadower_span },
        },
    ),
    var shadower_scope = if (config.no_shadow_hoisting()) {
        scope.hoisted_scope()
    } else {
        scope.unhoisted_scope()
    },

    // Search all visible declarations
    DeclarationVisibleWithin(file, shadower_scope, shadowed_id),
    // A declaration cannot shadow itself
    shadowed_id != shadower_id,

    InputScope(parent_scope, child_scope, file),
    // Filter declarations for one with an identical name
    VariableDeclarations(
        file,
        name,
        shadowed_scope,
        shadowed_id,
        &VariableMeta {
            .implicitly_declared = false,
            .declaration_span = Some { shadowed_span },
        },
    ),
    child_scope == if (config.no_shadow_hoisting()) {
        shadowed_scope.hoisted_scope()
    } else {
        shadowed_scope.unhoisted_scope()
    },

    // Within this match all "first", "second", etc. positional references are
    // in lexical terms, where the first declaration occurs before the second
    // in the physical source file
    match ((config.no_shadow_hoisting(), scope.is_hoistable(), shadowed_scope.is_hoistable())) {
        // If a variable is hoisted, the second shadows the first
        (true, true, true) -> shadower_span < shadowed_span,
        (true, false, true) -> shadower_span < shadowed_span,
        (true, true, false) -> shadower_span < shadowed_span,

        // Otherwise this is a valid shadowing
        (_, _, _) -> true,
    }.


// TODO: Does `NameInScope` do this?
relation DeclarationVisibleWithin(file: FileId, scope: ScopeId, declaration: AnyId)

DeclarationVisibleWithin(file, scope, declaration) :-
    File(file, _, _, config),
    config.no_shadow_enabled(),

    VariableDeclarations(
        file,
        _,
        decl_scope,
        declaration,
        &VariableMeta { .implicitly_declared = false },
    ),

    // Globals have no concrete declarations and cause massive bloat in the relation
    not declaration.is_global(),

    // If hoisting is enabled, use hoisted scopes
    var scope = if (config.no_shadow_hoisting()) {
        decl_scope.hoisted_scope()

    // If hoisting is disabled, use unhoisted scopes
    } else {
        decl_scope.unhoisted_scope()
    }.

// Propigate visibility
DeclarationVisibleWithin(file, child, declaration) :-
    DeclarationVisibleWithin(file, scope, declaration),
    InputScope(scope, child, file),
    not ScopeOfDeclName(file, _, child, declaration).
