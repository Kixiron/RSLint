import ast
import vec
import utils
import scopes
import inputs
import config
import var_decls
import name_in_scope

output relation NoShadow(
    variable: Name,
    original: (AnyId, Span),
    shadower: (AnyId, Span),
    implicit: bool,
    file: FileId,
)

NoShadow(name, (initial_id, initial_span), (shadower_id, shadower_span), false, file) :-
    File(file, _, _, config),
    config.no_shadow_enabled(),

    // Get the initial variable
    VariableDeclarations(
        file,
        name,
        scope,
        initial_id,
        &VariableMeta {
            .implicitly_declared = false,
            .declaration_span = Some { initial_span },
        },
    ),
    var initial_scope = if (config.no_shadow_hoisting()) {
        scope.hoisted_scope()
    } else {
        scope.unhoisted_scope()
    },

    // Search all visible declarations
    DeclarationVisibleWithin(file, initial_scope, shadower_id),
    // A declaration cannot shadow itself
    shadower_id != initial_id,

    // Filter declarations for one with an identical name
    VariableDeclarations(
        file,
        name,
        shadower_scope,
        shadower_id,
        &VariableMeta {
            .implicitly_declared = false,
            .declaration_span = Some { shadower_span },
        },
    ),

    // Make sure the hoisted variable occurs lexically after the
    // declaration that shadows it
    if (shadower_scope.is_hoistable() and config.no_shadow_hoisting()) {
        initial_span > shadower_span

    // Otherwise make sure the initial variable occurs lexically
    // before the shadowing declaration
    } else {
        initial_span < shadower_span
    }.


relation DeclarationVisibleWithin(file: FileId, scope: ScopeId, declaration: AnyId)

DeclarationVisibleWithin(file, scope, declaration) :-
    File(file, _, _, config),
    config.no_shadow_enabled(),

    VariableDeclarations(
        file,
        _,
        decl_scope,
        declaration,
        &VariableMeta { .implicitly_declared = false },
    ),
    // Globals have no concrete declarations, plus they cause
    // massive bloat in the relation
    not declaration.is_global(),

    // If hoisting is enabled, use hoisted scopes
    var scope = if (config.no_shadow_hoisting()) {
        decl_scope.hoisted_scope()

    // If hoisting is disabled, use unhoisted scopes
    } else {
        decl_scope.unhoisted_scope()
    }.

// Propigate visibility
DeclarationVisibleWithin(file, child, declaration) :-
    DeclarationVisibleWithin(file, scope, declaration),
    InputScope(scope, child, file).
