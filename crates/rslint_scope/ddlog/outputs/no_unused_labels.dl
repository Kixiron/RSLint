import ast
import utils
import group
import scopes
import inputs
import config

output relation NoUnusedLabels(
    stmt_id: StmtId,
    file: FileId,
    label_name: Spanned<Name>,
)

NoUnusedLabels(stmt, file, name) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(stmt, file, Some { name }, _, _),
    not UsedLabels(stmt, file, name.data).


output relation UsedLabels(
    stmt_id: StmtId,
    file: FileId,
    label_name: Name,
)

UsedLabels(stmt, file, name.data) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(stmt, file, Some { name }, _, body_scope),
    LabelUsage(_, file, name.data, body_scope).

UsedLabels(stmt, file, name.data) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(stmt, file, Some { name }, _, body_scope),
    ScopeFamily(body_scope, child_scope, file),
    LabelUsage(_, file, name.data, child_scope).

NeedsScopeChildren(scope, file) :- 
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(_, file, Some { Spanned { name, _ }}, _, scope),
    not LabelUsage(_, file, name, scope).

relation LabelUsage(
    stmt: StmtId,
    file: FileId,
    label_name: Name,
    scope: ScopeId,
)

LabelUsage(stmt, file, name, scope) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Break(stmt, file, Some { Spanned { name, _ }}),
    Statement(stmt, file, _, scope, _).

LabelUsage(stmt, file, name, scope) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Continue(stmt, file, Some { Spanned { name, _ }}),
    Statement(stmt, file, _, scope, _).
