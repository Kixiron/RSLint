import ast
import utils
import group
import scopes
import inputs
import config

output relation NoUnusedLabels(
    stmt_id: StmtId,
    file: FileId,
    label_name: Spanned<Name>,
)

NoUnusedLabels(stmt, file, name) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(stmt, file, Some { name }, _, _),
    not UsedLabel(stmt, file, name).

relation UsedLabel(
    stmt_id: StmtId,
    file: FileId,
    label_name: Spanned<Name>,
)

UsedLabel(stmt, file, label) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    InterumUsedLabel(stmt, file, label, body_scope),
    ScopeFamily(body_scope, child_scope, file),
    LabelUsage(_, file, label.data, child_scope).

relation InterumUsedLabel(
    stmt_id: StmtId,
    file: FileId,
    label_name: Spanned<Name>,
    body_scope: ScopeId, 
)

InterumUsedLabel(stmt, file, name, body_scope) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Label(stmt, file, Some { name }, _, body_scope).

NeedsScopeChildren(scope, file) :-InterumUsedLabel(_, file, _, scope).

relation LabelUsage(
    stmt: StmtId,
    file: FileId,
    label_name: Name,
    scope: ScopeId,
)

LabelUsage(stmt, file, name, scope) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Break(stmt, file, Some { Spanned { name, _ }}),
    Statement(stmt, file, _, scope, _).

LabelUsage(stmt, file, name, scope) :-
    File(file, _, _, config),
    config.no_unused_labels_enabled(),
    Continue(stmt, file, Some { Spanned { name, _ }}),
    Statement(stmt, file, _, scope, _).
