import ast
import vec
import inputs
import config
import name_in_scope

output relation NoTypeofUndef(whole_expr: ExprId, undefined_expr: ExprId, file: FileId)
NoTypeofUndef(whole_expr, undefined_expr, file) :-
    EnableNoTypeofUndef(file, _),

    NameRef(undefined_expr, file, name),
    Expression(undefined_expr, file, ExprNameRef, scope, span),

    // Expressions like `typeof not_undefined` are allowed under NoUndef
    // and are instead output through TypeofUndef
    WithinTypeofExpr(whole_expr, undefined_expr, file),
    not NameInScope(file, name, scope, _).


// Files that need to know about expressions nested within `typeof` expressions
relation NeedsWithinTypeofExpr(file: FileId)
NeedsWithinTypeofExpr(file) :- EnableNoTypeofUndef(file, _).
NeedsWithinTypeofExpr(file) :- EnableNoUndef(file, _).


relation WithinTypeofExpr(type_of: ExprId, expr: ExprId, file: FileId)
// `typeof not_defined`
WithinTypeofExpr(type_of, expr, file) :-
    NeedsWithinTypeofExpr(file),
    UnaryOp(type_of, file, Some { UnaryTypeof }, Some { expr }).

// `typeof (not_defined)`
WithinTypeofExpr(type_of, grouped, file) :-
    WithinTypeofExpr(type_of, expr, file),
    Expression(expr, file, ExprGrouping { Some { grouped }}, _, _).

// `typeof (defined, not_defined)`
WithinTypeofExpr(type_of, last, file) :-
    WithinTypeofExpr(type_of, expr, file),
    Expression(expr, file, ExprSequence { sequence }, _, _),
    Some { var last } = sequence.last().
