import ast
import vec
import regex
import inputs
import config
import scopes
import var_decls
import is_exported
import name_in_scope

output relation UnusedVariables(name: Name, declared: AnyId, span: Span, file: FileId)

// Only hit non-function arguments and non-globals
UnusedVariables(name, declared, span, file) :-
    EnableNoUnusedVars(file, config),

    VariableDeclarations(
        file,
        name,
        scope,
        declared,
        // Ignore function arguments and implict variables
        &VariableMeta {
            .is_function_argument = false,
            .implicitly_declared = false,
            .declaration_span = Some { span },
        },
    ),

    // If the variable name matches an ignored pattern, don't analyze it
    not config.deref().ignored_patterns().regex_set_match(name.ival()),
    // Ignore global variables
    not declared.is_global(),

    not IsExported(file, declared),
    not NameInScope(file, name, scope.hoisted_scope(), declared).

// For function arguments it doesn't matter if the parent function is exported or not
UnusedVariables(name, declared, span, file) :-
    EnableNoUnusedVars(file, config),

    VariableDeclarations(
        file,
        name,
        _,
        declared,
        &VariableMeta {
            .is_function_argument = true,
            // Ignore implict variables
            .implicitly_declared = false,
            .declaration_span = Some { span },
        },
    ),

    // If the variable name matches an ignored pattern, don't analyze it
    not config.deref().ignored_patterns().regex_set_match(name.ival()),

    FunctionBodyScope(file, declared, body_scope),
    not NameInScope(file, name, body_scope, declared).

// Handle globals
UnusedVariables(name, declared, span, file) :-
    EnableNoUnusedVars(file, config),

    VariableDeclarations(
        file,
        name,
        scope,
        declared @ AnyIdGlobal,
        // Ignore function arguments and implict variables
        &VariableMeta {
            .is_function_argument = false,
            .implicitly_declared = false,
            .declaration_span = Some { span },
        },
    ),

    // If the variable name matches an ignored pattern, don't analyze it
    not config.deref().ignored_patterns().regex_set_match(name.ival()),
    
    not IsExported(file, declared),
    not NameInScope(file, name, scope.unhoisted_scope(), declared).

relation FunctionBodyScope(file: FileId, id: AnyId, body: ScopeId)

FunctionBodyScope(file, AnyIdFunc { id }, body) :-
    EnableNoUnusedVars(file, config),
    Function(id, file, _, _, body, _).

FunctionBodyScope(file, AnyIdExpr { id }, body) :-
    EnableNoUnusedVars(file, config),
    Arrow(id, file, Some { (_, body) }).

FunctionBodyScope(file, AnyIdExpr { id }, body) :-
    EnableNoUnusedVars(file, config),
    InlineFunc(id, file, _, Some { body_id }),
    Statement(body_id, file, _, body, _).
