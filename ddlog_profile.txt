
Arrangement size profile
3773      ArrangeBySelf: Variable: name_in_scope::NameOccursInScope 539
3314      Arrange: global (name_in_scope::NameOccursInScope{.scope=(_2: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_0: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 569
3314      Arrange: global (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_2: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*semijoin*/ 565
3314      Arrange: local (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_: internment::Intern<string>), .file=(_1: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 490
3276      Arrange: (inputs::Expression{.id=_0, .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 155
3276      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 135
3276      Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_0, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 151
3276      Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Expression) /*join*/ 159
3201      ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) by (child, file) 1460
3201      ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file) by (file, name, parent) 1467
2420      ArrangeBySelf: Variable: outputs::no_shadow::DeclarationInDescendent 1326
2286      Arrange: local (outputs::no_shadow::DeclarationInDescendent{.file=(_1: ast::FileId), .scope=(_0: ast::ScopeId), .name=(_: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1298
2260      ArrangeBySelf: Variable: name_in_scope::NameInScope 1480
2260      Arrange: local (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1419
1582      ArrangeByKey: arrange scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) by (child, file) 779
1543      ArrangeBySelf: Variable: scopes::FunctionLevelScope 797
1542      Arrange: local (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 690
1542      Arrange: global (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 821
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 416
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=_0, .file=_1}: inputs::InputScope) /*join*/ 424
1498      Arrange: (inputs::InputScope{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: inputs::InputScope) /*join*/ 432
1498      Arrange: (inputs::EveryScope{.scope=(_: ast::ScopeId), .file=_0}: inputs::EveryScope) /*join*/ 116
1498      Reduce: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)) 781
1498      Arrange: (inputs::InputScope{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 420
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_: ast::ScopeId), .file=_0}: inputs::InputScope) /*join*/ 428
1092      ArrangeBySelf: Variable: outputs::no_undef::ChainedWith 263
1092      Arrange: local (outputs::no_undef::ChainedWith{.object=(_0: ast::ExprId), .property=(_: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 222
1092      ArrangeByKey: arrange __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file) by (interum, file) 250
1092      Arrange: local (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 218
989      Arrange: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 308
989      ArrangeBySelf: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 289
982      Arrange: (inputs::DotAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(_: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::DotAccess) /*join*/ 109
718      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name) by (undefined_expr, file) 1672
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (expr, file) 1578
718      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1892
718      Arrange: (inputs::NameRef{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 476
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) by (expr, file) 1594
718      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprNameRef{}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 139
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1571
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) by (file, name, scope) 1610
718      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in) by (file, expr) 1899
718      Arrange: (inputs::NameRef{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 472
718      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (undefined_expr, file) 1679
717      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) by (file, name, used_scope) 1915
654      Arrange: (inputs::Statement{.id=(_: ast::StmtId), .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Statement) /*join*/ 650
654      Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 638
654      Arrange: (inputs::Statement{.id=_0, .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 646
538      Reduce: Variable: name_in_scope::NameOccursInScope 541
464      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})) by (file, shadowed_scope, name) 1367
433      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) by (callee, file) 1958
433      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_) by (expr, file) 1951
433      Arrange: (inputs::Call{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .callee=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::Call) /*join*/ 65
288      Reduce: Variable: outputs::no_shadow::DeclarationInDescendent 1328
230      Arrange: ThresholdTotal: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1399
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1233
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1237
230      Arrange: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1405
230      ArrangeByKey: arrange var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=_) by (variable_scope, name, file) 1438
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Unhoistable{.scope=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1249
123      Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_1: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1280
123      Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1284
123      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id) by (file, shadowed_id) 1360
112      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1241
112      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1245
96      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1257
92      Reduce: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 291
86      Arrange: (inputs::ImplicitGlobal{.id=(_: ast::GlobalId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::ImplicitGlobal) /*join*/ 376
77      Arrange: (variable_decl::VariableDecl{.stmt=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: variable_decl::VariableDeclKind), .pattern=(_: ddlog_std::Option<ast::IPattern>), .value=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: variable_decl::VariableDecl) /*join*/ 1882
70      ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1933
66      Arrange: (inputs::ConstDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::ConstDecl) /*join*/ 92
32      ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 733
32      ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements) by (body, file) 1209
17      Arrange: (inputs::BracketAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::BracketAccess) /*join*/ 51
16      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1261
14      Arrange: (inputs::LetDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::LetDecl) /*join*/ 465
12      Arrange: (inputs::Arrow{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 20
12      Arrange: (inputs::Arrow{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 16
11      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprGrouping{.inner=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 143
10      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1965
7      Reduce: Variable: outputs::no_undef::ChainedWith 265
6      Arrange: (inputs::ArrowParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::ArrowParam) /*join*/ 27
5      Arrange: (inputs::ImportDecl{.id=(_: ast::ImportId), .file=(_0: ast::FileId), .clause=(_: ast::ImportClause)}: inputs::ImportDecl) /*join*/ 383
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 204
1      Arrange: (inputs::Class{.id=(_0: ast::ClassId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 72
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 328
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 184
1      Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*join*/ 576
1      Arrange: (inputs::File{.id=(_: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 170
1      Arrange: ThresholdTotal: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 582
1      Arrange: (inputs::Class{.id=(_: ast::ClassId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_1: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 76
1      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_) by (expr, file) 598
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 625
1      Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 606
1      Arrange: (inputs::Try{.stmt_id=(_: ast::StmtId), .file=(_1: ast::FileId), .body=(_: ddlog_std::Option<ast::StmtId>), .handler=(ast::TryHandler{.error=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: ast::TryHandler), .finalizer=(_: ddlog_std::Option<ast::StmtId>)}: inputs::Try) /*join*/ 937
1      Reduce: Variable: scopes::FunctionLevelScope 799
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 318
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 194
1      Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 588
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 610
1      Arrange: (inputs::File{.id=(_0: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 166
1      Arrange: (inputs::File{.id=_0, .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 174
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_2: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 621
0      Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=_1, .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*semijoin*/ 852
0      Arrange: (inputs::Break{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Break) /*join*/ 58
0      ArrangeByKey: arrange inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 745
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdFunc{.func=(_: ast::FuncId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1553
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::hoisted_scope(scope)), declared) 1778
0      Arrange: (inputs::Continue{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Continue) /*join*/ 99
0      Arrange: global (name_in_scope::NameInScope{.file=_0, .name=(_: internment::Intern<string>), .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1561
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope) by (file, name, scope) 874
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1829
0      Arrange: global (scopes::ScopeFamily{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: scopes::ScopeFamily) /*join*/ 2115
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::unhoisted_scope(scope)), declared) 1845
0      Arrange: ThresholdTotal: outputs::unused_vars::UnusedVariables.threshold_total 1864
0      ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 761
0      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))) by (file, name, scope) 1641
0      Arrange: (inputs::InlineFuncParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::InlineFuncParam) /*join*/ 409
0      Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 347
0      ArrangeBySelf: Variable: scopes::ScopeFamily 2087
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file) by (file, (name.data), child_scope) 2129
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1504
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}) by (body_id, file) 668
0      Arrange: ThresholdTotal: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1746
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope) by (file, name, body_scope, declared) 1807
0      Reduce: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1512
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 390
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 842
0      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Hoistable{.hoisted=(_: ast::ScopeId), .unhoisted=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1253
0      Arrange: ThresholdTotal: outputs::no_undef::NoUndef.threshold_total 1660
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 398
0      Arrange: ThresholdTotal: outputs::no_shadow::NoShadow.threshold_total 1382
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_) by (stmt, file, (name.data)) 2155
0      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file) by (file, name, scope) 1686
0      Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 443
0      Arrange: ThresholdTotal: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 858
0      Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(ast::StmtVarDecl{}: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 642
0      Arrange: (inputs::VarDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::VarDecl) /*join*/ 1103
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1541
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdClass{.class=(_: ast::ClassId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1549
0      ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 1221
0      Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 864
0      Arrange: global (outputs::no_shadow::DeclarationInDescendent{.file=(_0: ast::FileId), .scope=(_1: ast::ScopeId), .name=(_2: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1350
0      Arrange: global (name_in_scope::NameInScope{.file=_0, .name=_2, .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1557
0      Arrange: ThresholdTotal: outputs::typeof_undef::TypeofUndef.threshold_total 1705
0      Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 359
0      Arrange: (inputs::Assign{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 38
0      Reduce: Variable: scopes::ScopeFamily 2089
0      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::StmtId), ((ast::Spanned{.data=_1, .span=_}: ast::Spanned{data: ast::Name, span: ast::Span}): ast::Spanned<ast::Name>), (_2: ast::ScopeId)) /*join*/ 454
0      Reduce: Variable: outputs::typeof_undef::WithinTypeofExpr 1020
0      ArrangeBySelf: Variable: __Prefix_2 1040
0      ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id) by (file, name, id) 1736
0      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id), (shadowed_id != shadower_id) by (file, name, shadower_id) 1374
0      Arrange: (inputs::ClassExpr{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>)}: inputs::ClassExpr) /*semijoin*/ 85
0      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprSequence{.exprs=(_: ddlog_std::Vec<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 147
0      Arrange: local (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 972
0      Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 1089
0      Arrange: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1752
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 831
0      Arrange: global (scopes::ScopeFamily{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2111
0      Arrange: (config::EnableNoUnusedVars{.file=(_0: ast::FileId), .config=(_: ddlog_std::Ref<config::NoUnusedVarsConfig>)}: config::EnableNoUnusedVars) /*join*/ 6
0      ArrangeBySelf: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1066
0      Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1085
0      Reduce: Variable: name_in_scope::NameInScope 1482
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=_2, .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1535
0      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})) by (func, file) 1972
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_) by (class, file) 1990
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})) by (decl, file) 1983
0      Arrange: ThresholdTotal: outputs::no_unused_labels::NoUnusedLabels.threshold_total 2174
0      Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 351
0      Reduce: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1068
0      ArrangeBySelf: Variable: outputs::typeof_undef::WithinTypeofExpr 1018
0      Arrange: (inputs::UserGlobal{.id=(_: ast::GlobalId), .file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::UserGlobal) /*join*/ 1096
0      Arrange: (inputs::UnaryOp{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .op=(ddlog_std::Some{.x=(ast::UnaryTypeof{}: ast::UnaryOperand)}: ddlog_std::Option<ast::UnaryOperand>), .expr=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::UnaryOp) /*join*/ 944
0      Arrange: ThresholdTotal: outputs::use_before_def::UseBeforeDef.threshold_total 2009
0      Reduce: Variable: __Prefix_2 1042
0      Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(_: ast::Spanned<ast::Name>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 439
0      ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope) by (file, name, export_scope) 1729
0      ArrangeByKey: arrange inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}) by (body, file) 1187
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 394
0      ArrangeBySelf: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1510
0      ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})) by (class, file) 1940
0      Arrange: (inputs::InlineFunc{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 402
0      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_) by (expr, file) 1632
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1529
0      Arrange: (scopes::NeedsScopeParents{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeParents) /*join*/ 2036
0      Arrange: (inputs::FunctionArg{.parent_func=(_0: ast::FuncId), .file=(_1: ast::FileId), .pattern=(_: internment::Intern<ast::Pattern>), .implicit=(_: bool)}: inputs::FunctionArg) /*join*/ 366
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1800
0      Arrange: ThresholdTotal: outputs::no_unused_labels::UsedLabels.threshold_total 2137
0      Arrange: local (scopes::ScopeFamily{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2050
0      Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_0: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 355
0      ArrangeByKey: arrange inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) by (stmt_scope, file) 1148
0      Arrange: (inputs::Assign{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 34
0      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(ast::AnyIdGlobal{.global=(_: ast::GlobalId)}: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1265
0      Arrange: (scopes::NeedsScopeChildren{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeChildren) /*join*/ 893
0      Arrange: (outputs::unused_vars::FunctionBodyScope{.file=(_0: ast::FileId), .id=(_1: ast::AnyId), .body=(_: ast::ScopeId)}: outputs::unused_vars::FunctionBodyScope) /*join*/ 676
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_) by (class, file) 1997
0      Arrange: (outputs::no_unused_labels::UsedLabels{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .label_name=_2}: outputs::no_unused_labels::UsedLabels) /*antijoin*/ 2145
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))) by (file, declared) 1762
0      Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::StmtId), (_: ast::Spanned<ast::Name>), (_0: ast::ScopeId)) /*join*/ 458
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdStmt{.stmt=(_: ast::StmtId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1545
0      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})) by (stmt, file) 1922
0      Arrange: local ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId)) /*join*/ 968

Arrangement peak sizes
3773      ArrangeBySelf: Variable: name_in_scope::NameOccursInScope 539
3314      Arrange: global (name_in_scope::NameOccursInScope{.scope=(_2: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_0: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 569
3314      Arrange: global (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_2: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*semijoin*/ 565
3314      Arrange: local (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_: internment::Intern<string>), .file=(_1: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 490
3276      Arrange: (inputs::Expression{.id=_0, .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 155
3276      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 135
3276      Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_0, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 151
3276      Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Expression) /*join*/ 159
3201      ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) by (child, file) 1460
3201      ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file) by (file, name, parent) 1467
2420      ArrangeBySelf: Variable: outputs::no_shadow::DeclarationInDescendent 1326
2286      Arrange: local (outputs::no_shadow::DeclarationInDescendent{.file=(_1: ast::FileId), .scope=(_0: ast::ScopeId), .name=(_: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1298
2260      ArrangeBySelf: Variable: name_in_scope::NameInScope 1480
2260      Arrange: local (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1419
1582      ArrangeByKey: arrange scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) by (child, file) 779
1543      ArrangeBySelf: Variable: scopes::FunctionLevelScope 797
1542      Arrange: local (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 690
1542      Arrange: global (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 821
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 416
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=_0, .file=_1}: inputs::InputScope) /*join*/ 424
1498      Arrange: (inputs::InputScope{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: inputs::InputScope) /*join*/ 432
1498      Arrange: (inputs::EveryScope{.scope=(_: ast::ScopeId), .file=_0}: inputs::EveryScope) /*join*/ 116
1498      Reduce: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)) 781
1498      Arrange: (inputs::InputScope{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 420
1498      Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_: ast::ScopeId), .file=_0}: inputs::InputScope) /*join*/ 428
1092      ArrangeBySelf: Variable: outputs::no_undef::ChainedWith 263
1092      Arrange: local (outputs::no_undef::ChainedWith{.object=(_0: ast::ExprId), .property=(_: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 222
1092      ArrangeByKey: arrange __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file) by (interum, file) 250
1092      Arrange: local (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 218
989      Arrange: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 308
989      ArrangeBySelf: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 289
982      Arrange: (inputs::DotAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(_: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::DotAccess) /*join*/ 109
718      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name) by (undefined_expr, file) 1672
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (expr, file) 1578
718      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1892
718      Arrange: (inputs::NameRef{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 476
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) by (expr, file) 1594
718      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprNameRef{}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 139
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1571
718      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) by (file, name, scope) 1610
718      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in) by (file, expr) 1899
718      Arrange: (inputs::NameRef{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 472
718      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (undefined_expr, file) 1679
717      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) by (file, name, used_scope) 1915
654      Arrange: (inputs::Statement{.id=(_: ast::StmtId), .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Statement) /*join*/ 650
654      Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 638
654      Arrange: (inputs::Statement{.id=_0, .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 646
538      Reduce: Variable: name_in_scope::NameOccursInScope 541
464      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})) by (file, shadowed_scope, name) 1367
433      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) by (callee, file) 1958
433      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_) by (expr, file) 1951
433      Arrange: (inputs::Call{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .callee=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::Call) /*join*/ 65
288      Reduce: Variable: outputs::no_shadow::DeclarationInDescendent 1328
230      Arrange: ThresholdTotal: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1399
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1233
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1237
230      Arrange: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1405
230      ArrangeByKey: arrange var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=_) by (variable_scope, name, file) 1438
230      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Unhoistable{.scope=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1249
123      Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_1: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1280
123      Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1284
123      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id) by (file, shadowed_id) 1360
112      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1241
112      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1245
96      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1257
92      Reduce: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 291
86      Arrange: (inputs::ImplicitGlobal{.id=(_: ast::GlobalId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::ImplicitGlobal) /*join*/ 376
77      Arrange: (variable_decl::VariableDecl{.stmt=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: variable_decl::VariableDeclKind), .pattern=(_: ddlog_std::Option<ast::IPattern>), .value=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: variable_decl::VariableDecl) /*join*/ 1882
70      ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1933
66      Arrange: (inputs::ConstDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::ConstDecl) /*join*/ 92
32      ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 733
32      ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements) by (body, file) 1209
17      Arrange: (inputs::BracketAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::BracketAccess) /*join*/ 51
16      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1261
14      Arrange: (inputs::LetDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::LetDecl) /*join*/ 465
12      Arrange: (inputs::Arrow{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 20
12      Arrange: (inputs::Arrow{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 16
11      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprGrouping{.inner=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 143
10      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1965
7      Reduce: Variable: outputs::no_undef::ChainedWith 265
6      Arrange: (inputs::ArrowParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::ArrowParam) /*join*/ 27
5      Arrange: (inputs::ImportDecl{.id=(_: ast::ImportId), .file=(_0: ast::FileId), .clause=(_: ast::ImportClause)}: inputs::ImportDecl) /*join*/ 383
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 204
1      Arrange: (inputs::Class{.id=(_0: ast::ClassId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 72
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 328
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 184
1      Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*join*/ 576
1      Arrange: (inputs::File{.id=(_: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 170
1      Arrange: ThresholdTotal: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 582
1      Arrange: (inputs::Class{.id=(_: ast::ClassId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_1: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 76
1      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_) by (expr, file) 598
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 625
1      Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 606
1      Arrange: (inputs::Try{.stmt_id=(_: ast::StmtId), .file=(_1: ast::FileId), .body=(_: ddlog_std::Option<ast::StmtId>), .handler=(ast::TryHandler{.error=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: ast::TryHandler), .finalizer=(_: ddlog_std::Option<ast::StmtId>)}: inputs::Try) /*join*/ 937
1      Reduce: Variable: scopes::FunctionLevelScope 799
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 318
1      Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 194
1      Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 588
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 610
1      Arrange: (inputs::File{.id=(_0: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 166
1      Arrange: (inputs::File{.id=_0, .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 174
1      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_2: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 621
0      Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=_1, .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*semijoin*/ 852
0      Arrange: (inputs::Break{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Break) /*join*/ 58
0      ArrangeByKey: arrange inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 745
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdFunc{.func=(_: ast::FuncId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1553
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::hoisted_scope(scope)), declared) 1778
0      Arrange: (inputs::Continue{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Continue) /*join*/ 99
0      Arrange: global (name_in_scope::NameInScope{.file=_0, .name=(_: internment::Intern<string>), .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1561
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope) by (file, name, scope) 874
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1829
0      Arrange: global (scopes::ScopeFamily{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: scopes::ScopeFamily) /*join*/ 2115
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::unhoisted_scope(scope)), declared) 1845
0      Arrange: ThresholdTotal: outputs::unused_vars::UnusedVariables.threshold_total 1864
0      ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 761
0      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))) by (file, name, scope) 1641
0      Arrange: (inputs::InlineFuncParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::InlineFuncParam) /*join*/ 409
0      Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 347
0      ArrangeBySelf: Variable: scopes::ScopeFamily 2087
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file) by (file, (name.data), child_scope) 2129
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1504
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}) by (body_id, file) 668
0      Arrange: ThresholdTotal: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1746
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope) by (file, name, body_scope, declared) 1807
0      Reduce: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1512
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 390
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 842
0      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Hoistable{.hoisted=(_: ast::ScopeId), .unhoisted=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1253
0      Arrange: ThresholdTotal: outputs::no_undef::NoUndef.threshold_total 1660
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 398
0      Arrange: ThresholdTotal: outputs::no_shadow::NoShadow.threshold_total 1382
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_) by (stmt, file, (name.data)) 2155
0      ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file) by (file, name, scope) 1686
0      Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 443
0      Arrange: ThresholdTotal: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 858
0      Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(ast::StmtVarDecl{}: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 642
0      Arrange: (inputs::VarDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::VarDecl) /*join*/ 1103
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1541
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdClass{.class=(_: ast::ClassId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1549
0      ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 1221
0      Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 864
0      Arrange: global (outputs::no_shadow::DeclarationInDescendent{.file=(_0: ast::FileId), .scope=(_1: ast::ScopeId), .name=(_2: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1350
0      Arrange: global (name_in_scope::NameInScope{.file=_0, .name=_2, .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1557
0      Arrange: ThresholdTotal: outputs::typeof_undef::TypeofUndef.threshold_total 1705
0      Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 359
0      Arrange: (inputs::Assign{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 38
0      Reduce: Variable: scopes::ScopeFamily 2089
0      Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::StmtId), ((ast::Spanned{.data=_1, .span=_}: ast::Spanned{data: ast::Name, span: ast::Span}): ast::Spanned<ast::Name>), (_2: ast::ScopeId)) /*join*/ 454
0      Reduce: Variable: outputs::typeof_undef::WithinTypeofExpr 1020
0      ArrangeBySelf: Variable: __Prefix_2 1040
0      ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id) by (file, name, id) 1736
0      ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id), (shadowed_id != shadower_id) by (file, name, shadower_id) 1374
0      Arrange: (inputs::ClassExpr{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>)}: inputs::ClassExpr) /*semijoin*/ 85
0      Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprSequence{.exprs=(_: ddlog_std::Vec<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 147
0      Arrange: local (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 972
0      Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 1089
0      Arrange: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1752
0      ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 831
0      Arrange: global (scopes::ScopeFamily{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2111
0      Arrange: (config::EnableNoUnusedVars{.file=(_0: ast::FileId), .config=(_: ddlog_std::Ref<config::NoUnusedVarsConfig>)}: config::EnableNoUnusedVars) /*join*/ 6
0      ArrangeBySelf: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1066
0      Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1085
0      Reduce: Variable: name_in_scope::NameInScope 1482
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=_2, .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1535
0      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})) by (func, file) 1972
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_) by (class, file) 1990
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})) by (decl, file) 1983
0      Arrange: ThresholdTotal: outputs::no_unused_labels::NoUnusedLabels.threshold_total 2174
0      Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 351
0      Reduce: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1068
0      ArrangeBySelf: Variable: outputs::typeof_undef::WithinTypeofExpr 1018
0      Arrange: (inputs::UserGlobal{.id=(_: ast::GlobalId), .file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::UserGlobal) /*join*/ 1096
0      Arrange: (inputs::UnaryOp{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .op=(ddlog_std::Some{.x=(ast::UnaryTypeof{}: ast::UnaryOperand)}: ddlog_std::Option<ast::UnaryOperand>), .expr=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::UnaryOp) /*join*/ 944
0      Arrange: ThresholdTotal: outputs::use_before_def::UseBeforeDef.threshold_total 2009
0      Reduce: Variable: __Prefix_2 1042
0      Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(_: ast::Spanned<ast::Name>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 439
0      ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope) by (file, name, export_scope) 1729
0      ArrangeByKey: arrange inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}) by (body, file) 1187
0      Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 394
0      ArrangeBySelf: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1510
0      ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})) by (class, file) 1940
0      Arrange: (inputs::InlineFunc{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 402
0      ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_) by (expr, file) 1632
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1529
0      Arrange: (scopes::NeedsScopeParents{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeParents) /*join*/ 2036
0      Arrange: (inputs::FunctionArg{.parent_func=(_0: ast::FuncId), .file=(_1: ast::FileId), .pattern=(_: internment::Intern<ast::Pattern>), .implicit=(_: bool)}: inputs::FunctionArg) /*join*/ 366
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1800
0      Arrange: ThresholdTotal: outputs::no_unused_labels::UsedLabels.threshold_total 2137
0      Arrange: local (scopes::ScopeFamily{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2050
0      Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_0: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 355
0      ArrangeByKey: arrange inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) by (stmt_scope, file) 1148
0      Arrange: (inputs::Assign{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 34
0      Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(ast::AnyIdGlobal{.global=(_: ast::GlobalId)}: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1265
0      Arrange: (scopes::NeedsScopeChildren{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeChildren) /*join*/ 893
0      Arrange: (outputs::unused_vars::FunctionBodyScope{.file=(_0: ast::FileId), .id=(_1: ast::AnyId), .body=(_: ast::ScopeId)}: outputs::unused_vars::FunctionBodyScope) /*join*/ 676
0      ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_) by (class, file) 1997
0      Arrange: (outputs::no_unused_labels::UsedLabels{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .label_name=_2}: outputs::no_unused_labels::UsedLabels) /*antijoin*/ 2145
0      ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))) by (file, declared) 1762
0      Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::StmtId), (_: ast::Spanned<ast::Name>), (_0: ast::ScopeId)) /*join*/ 458
0      Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdStmt{.stmt=(_: ast::StmtId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1545
0      ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})) by (stmt, file) 1922
0      Arrange: local ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId)) /*join*/ 968

CPU profile
     0s057557us (      330calls)     Dataflow: 0
       0s008096us (      166calls)     recursive component: 560
         0s002663us (       84calls)     Reduce: Variable: name_in_scope::NameOccursInScope 541
         0s001528us (       84calls)     Join: name_in_scope::NameOccursInScope(.scope=child, .name=(interned@ (&name_in_scope::NameOccurrence{.name=_, .file=file}))), inputs::InputScope(.parent=parent, .child=child, .file=file) 528
         0s000499us (      124calls)     Consolidate: Variable: name_in_scope::NameOccursInScope 552
         0s000390us (       84calls)     ArrangeBySelf: Variable: name_in_scope::NameOccursInScope 539
         0s000380us (       82calls)     Arrange: local (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_: internment::Intern<string>), .file=(_1: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 490
         0s000289us (       78calls)     FlatMap: local (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_: internment::Intern<string>), .file=(_1: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 488
         0s000251us (        5calls)     Join: inputs::NameRef(.expr_id=id, .file=file, .value=name), inputs::Expression(.id=id, .file=file, .kind=_, .scope=scope, .span=_) 507
         0s000134us (       80calls)     AsCollection: Variable: name_in_scope::NameOccursInScope 554
         0s000109us (       82calls)     Feedback: Variable: name_in_scope::NameOccursInScope 482
         0s000100us (      113calls)     Map: Variable: name_in_scope::NameOccursInScope 550
         0s000081us (       84calls)     Concatenate: 531
         0s000080us (       80calls)     Map: Variable: name_in_scope::NameOccursInScope 537
         0s000079us (      124calls)     Concatenate: Variable: name_in_scope::NameOccursInScope 547
         0s000065us (       80calls)     AsCollection: Variable: name_in_scope::NameOccursInScope 543
         0s000063us (       78calls)     Map: Variable: name_in_scope::NameOccursInScope 556
         0s000047us (       78calls)     Filter: 483
         0s000040us (       66calls)     Map: Variable: name_in_scope::NameOccursInScope 545
         0s000027us (        6calls)     Join: inputs::Assign(.expr_id=id, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pattern}}, .rhs=_, .op=_), inputs::Expression(.id=id, .file=file, .kind=_, .scope=scope, .span=_) 513
         0s000025us (        2calls)     Map: 496
         0s000014us (       46calls)     Concatenate: 510
         0s000014us (       45calls)     Concatenate: 520
         0s000013us (       46calls)     Concatenate: 525
         0s000010us (       44calls)     Concatenate: 485
         0s000002us (        2calls)     Map: 493
         0s000002us (        2calls)     Map: 502
         0s000000us (        0calls)     FlatMap: inputs::Assign(.expr_id=id, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pattern}}, .rhs=_, .op=_), inputs::Expression(.id=id, .file=file, .kind=_, .scope=scope, .span=_), var name = FlatMap((vec::map((ast::bound_vars(pattern)), (function(name: ast::Spanned<ast::Name>):internment::Intern<string>{(name.data)})))) 516
         0s000000us (        0calls)     FlatMap: head of name_in_scope::NameOccursInScope(.scope=scope, .name=interned) :- inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), (var interned = (internment::intern(name_in_scope::NameOccurrence{.name=name, .file=file}))). 523
         0s000000us (        0calls)     Map: 499
         0s000000us (        0calls)     FlatMap: head of name_in_scope::NameOccursInScope(.scope=scope, .name=interned) :- inputs::Assign(.expr_id=id, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pattern}}, .rhs=_, .op=_), inputs::Expression(.id=id, .file=file, .kind=_, .scope=scope, .span=_), var name = FlatMap((vec::map((ast::bound_vars(pattern)), (function(name: ast::Spanned<ast::Name>):internment::Intern<string>{(name.data)})))), (var interned = (internment::intern(name_in_scope::NameOccurrence{.name=name, .file=file}))). 518
         0s000000us (        0calls)     Map: 480
         0s000000us (        0calls)     Map: 505
       0s007820us (      158calls)     recursive component: 1501
         0s001556us (       73calls)     Reduce: Variable: name_in_scope::NameInScope 1482
         0s001294us (       73calls)     Join: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file), name_in_scope::NameInScope(.file=file, .name=name, .scope=parent, .declared=declared) 1469
         0s000544us (        5calls)     ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file) by (file, name, parent) 1467
         0s000414us (        7calls)     ArrangeByKey: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) by (child, file) 1460
         0s000393us (        2calls)     FlatMap: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file) by (file, name, parent) 1465
         0s000340us (        9calls)     Join: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_), inputs::InputScope(.parent=parent, .child=child, .file=file) 1462
         0s000281us (        4calls)     FlatMap: arrange name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) by (child, file) 1458
         0s000279us (       72calls)     Arrange: local (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1419
         0s000240us (       69calls)     FlatMap: local (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1417
         0s000230us (       74calls)     ArrangeBySelf: Variable: name_in_scope::NameInScope 1480
         0s000227us (      108calls)     Consolidate: Variable: name_in_scope::NameInScope 1493
         0s000186us (        2calls)     AsCollection: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) 1446
         0s000095us (       70calls)     AsCollection: Variable: name_in_scope::NameInScope 1495
         0s000084us (       72calls)     Feedback: Variable: name_in_scope::NameInScope 1411
         0s000076us (        9calls)     Join: var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=_), (var variable_scope = (var_decls::hoisted_scope(scope))), name_in_scope::NameOccursInScope(.scope=variable_scope, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})) 1440
         0s000074us (        9calls)     Join: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) 1448
         0s000060us (       74calls)     Concatenate: 1472
         0s000055us (        4calls)     Map: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) 1456
         0s000054us (       70calls)     Map: Variable: name_in_scope::NameInScope 1478
         0s000052us (       70calls)     Map: Variable: name_in_scope::NameInScope 1491
         0s000050us (       70calls)     Map: Variable: name_in_scope::NameInScope 1497
         0s000047us (        6calls)     ArrangeByKey: arrange var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=_) by (variable_scope, name, file) 1438
         0s000045us (      109calls)     Concatenate: Variable: name_in_scope::NameInScope 1488
         0s000034us (       69calls)     Filter: 1412
         0s000033us (        2calls)     FlatMap: arrange var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=_) by (variable_scope, name, file) 1436
         0s000029us (       70calls)     AsCollection: Variable: name_in_scope::NameInScope 1484
         0s000016us (        9calls)     Concatenate: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) 1453
         0s000011us (       40calls)     Concatenate: 1443
         0s000009us (       38calls)     Concatenate: 1414
         0s000007us (        2calls)     Map: 1425
         0s000006us (        2calls)     Map: 1434
         0s000004us (        2calls)     Map: 1422
         0s000002us (        2calls)     Map: 1431
         0s000002us (        2calls)     Map: 1428
         0s000001us (        2calls)     MapInPlace: name_in_scope::NameOccursInScope(.scope=child, .name=(&name_in_scope::NameOccurrence{.name=name, .file=file})), not name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=child, .declared=_) 1451
         0s000000us (        0calls)     Map: 1409
         0s000000us (        0calls)     Map: Variable: name_in_scope::NameInScope 1486
       0s007736us (      178calls)     recursive component: 818
         0s002162us (       71calls)     Reduce: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)) 781
         0s001147us (       72calls)     Reduce: Variable: scopes::FunctionLevelScope 799
         0s000903us (       73calls)     Join: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) 774
         0s000255us (       71calls)     ArrangeByKey: arrange scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) by (child, file) 779
         0s000245us (       72calls)     Arrange: local (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 690
         0s000182us (       73calls)     ArrangeBySelf: Variable: scopes::FunctionLevelScope 797
         0s000169us (      107calls)     Consolidate: Variable: scopes::FunctionLevelScope 810
         0s000130us (       66calls)     FlatMap: arrange scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) by (child, file) 777
         0s000123us (       66calls)     FlatMap: head of scopes::FunctionLevelScope(.scope=child, .nearest=scope, .file=file, .id=id) :- scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)), ((var scope, var id) = (group::arg_max(__group, (function(scope: (ast::ScopeId, ast::AnyId)):ast::ScopeId{(scope.0)})))). 787
         0s000100us (       68calls)     FlatMap: local (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 688
         0s000091us (       66calls)     AsCollection: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)) 783
         0s000077us (       68calls)     AsCollection: Variable: scopes::FunctionLevelScope 812
         0s000070us (       72calls)     Feedback: Variable: scopes::FunctionLevelScope 682
         0s000059us (      107calls)     Concatenate: 789
         0s000053us (       69calls)     Map: Variable: scopes::FunctionLevelScope 795
         0s000051us (       66calls)     Map: scopes::FunctionLevelScope(.scope=parent, .nearest=scope, .file=file, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file), var __group = (scope, id).group_by((child, file)) 785
         0s000046us (        5calls)     Join: inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=scope, .span=_) 735
         0s000044us (       70calls)     Map: Variable: scopes::FunctionLevelScope 808
         0s000043us (      107calls)     Concatenate: Variable: scopes::FunctionLevelScope 805
         0s000040us (       68calls)     Map: Variable: scopes::FunctionLevelScope 814
         0s000030us (       68calls)     Filter: 683
         0s000027us (        2calls)     FlatMap: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 731
         0s000026us (       68calls)     AsCollection: Variable: scopes::FunctionLevelScope 801
         0s000021us (        5calls)     ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 733
         0s000019us (        6calls)     Join: inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}), inputs::Statement(.id=body, .file=file, .kind=_, .scope=scope, .span=_) 753
         0s000018us (        5calls)     Join: inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}), (ddlog_std::Some{.x=var body} = (ast::body(val))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=scope, .span=_) 763
         0s000018us (        6calls)     Join: inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=scope, .span=_) 747
         0s000012us (       41calls)     Concatenate: 738
         0s000011us (       41calls)     Concatenate: 756
         0s000011us (       41calls)     Concatenate: 721
         0s000010us (       41calls)     Concatenate: 750
         0s000010us (       41calls)     Concatenate: 771
         0s000010us (       41calls)     Concatenate: 766
         0s000010us (       39calls)     Concatenate: 685
         0s000009us (       40calls)     Concatenate: 726
         0s000009us (        2calls)     FlatMap: inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) 729
         0s000008us (        4calls)     ArrangeByKey: arrange inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 745
         0s000005us (        4calls)     ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 761
         0s000004us (        2calls)     Map: 699
         0s000004us (        2calls)     FlatMap: head of scopes::FunctionLevelScope(.scope=scope, .nearest=scope, .file=file, .id=ast::AnyIdFile{.file=file}) :- inputs::File(.id=file, .kind=_, .top_level_scope=scope, .config=_). 719
         0s000003us (        2calls)     Map: 696
         0s000002us (        2calls)     FlatMap: head of scopes::FunctionLevelScope(.scope=scope, .nearest=scope, .file=file, .id=ast::AnyIdExpr{.expr=expr}) :- inputs::Arrow(.expr_id=expr, .file=file, .body=ddlog_std::Some{.x=(_, scope)}). 769
         0s000002us (        2calls)     Map: 705
         0s000002us (        2calls)     FlatMap: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 759
         0s000002us (        2calls)     Map: 717
         0s000001us (        2calls)     Map: 711
         0s000001us (        2calls)     Map: 714
         0s000001us (        2calls)     Map: Variable: scopes::FunctionLevelScope 803
         0s000000us (        0calls)     FlatMap: arrange inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) by (body, file) 743
         0s000000us (        0calls)     FlatMap: head of scopes::FunctionLevelScope(.scope=body, .nearest=body, .file=file, .id=ast::AnyIdFunc{.func=func}) :- inputs::Function(.id=func, .file=file, .name=_, .scope=_, .body=body, .exported=_). 724
         0s000000us (        0calls)     FlatMap: inputs::ClassExpr(.expr_id=expr, .file=file, .elements=ddlog_std::Some{.x=elements}), var body = FlatMap((vec::filter_map(elements, (function(elem: internment::Intern<ast::ClassElement>):ddlog_std::Option<ast::StmtId>{(ast::body((internment::ival(elem))))})))) 741
         0s000000us (        0calls)     Map: 680
         0s000000us (        0calls)     Map: 708
         0s000000us (        0calls)     Map: 693
         0s000000us (        0calls)     Map: 702
       0s005889us (      154calls)     recursive component: 1347
         0s001795us (       73calls)     Reduce: Variable: outputs::no_shadow::DeclarationInDescendent 1328
         0s000999us (       76calls)     Join: outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=child, .name=name, .id=id), inputs::InputScope(.parent=parent, .child=child, .file=file) 1315
         0s000366us (      109calls)     Consolidate: Variable: outputs::no_shadow::DeclarationInDescendent 1339
         0s000318us (       74calls)     ArrangeBySelf: Variable: outputs::no_shadow::DeclarationInDescendent 1326
         0s000296us (       73calls)     Arrange: local (outputs::no_shadow::DeclarationInDescendent{.file=(_1: ast::FileId), .scope=(_0: ast::ScopeId), .name=(_: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1298
         0s000290us (        7calls)     Join: outputs::no_shadow::ScopeOfDecl(.file=file, .scope=scope, .declared=id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=id, .meta=_) 1309
         0s000198us (       70calls)     FlatMap: local (outputs::no_shadow::DeclarationInDescendent{.file=(_1: ast::FileId), .scope=(_0: ast::ScopeId), .name=(_: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1296
         0s000103us (       70calls)     AsCollection: Variable: outputs::no_shadow::DeclarationInDescendent 1341
         0s000095us (       73calls)     Feedback: Variable: outputs::no_shadow::DeclarationInDescendent 1290
         0s000080us (       98calls)     Map: Variable: outputs::no_shadow::DeclarationInDescendent 1337
         0s000070us (       77calls)     Concatenate: 1318
         0s000066us (       71calls)     Map: Variable: outputs::no_shadow::DeclarationInDescendent 1324
         0s000062us (      109calls)     Concatenate: Variable: outputs::no_shadow::DeclarationInDescendent 1334
         0s000057us (       70calls)     Map: Variable: outputs::no_shadow::DeclarationInDescendent 1343
         0s000045us (       70calls)     AsCollection: Variable: outputs::no_shadow::DeclarationInDescendent 1330
         0s000037us (       70calls)     Filter: 1291
         0s000033us (       54calls)     Map: Variable: outputs::no_shadow::DeclarationInDescendent 1332
         0s000029us (        2calls)     Map: 1301
         0s000011us (       41calls)     Concatenate: 1312
         0s000009us (       39calls)     Concatenate: 1293
         0s000003us (        2calls)     Map: 1304
         0s000002us (        2calls)     Map: 1307
         0s000000us (        0calls)     Map: 1288
       0s002039us (       24calls)     recursive component: 284
         0s000314us (       10calls)     Reduce: Variable: outputs::no_undef::ChainedWith 265
         0s000216us (       13calls)     Join: __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file), outputs::no_undef::ChainedWith(.object=interum, .property=property, .file=file) 252
         0s000153us (        6calls)     Join: __Prefix_7[(file, config)], inputs::DotAccess(.expr_id=property, .file=file, .object=ddlog_std::Some{.x=object}, .prop=_) 239
         0s000152us (       12calls)     Join: __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file) 245
         0s000119us (       10calls)     Arrange: local (outputs::no_undef::ChainedWith{.object=(_0: ast::ExprId), .property=(_: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 222
         0s000103us (       10calls)     Arrange: local (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 218
         0s000102us (       14calls)     Consolidate: Variable: outputs::no_undef::ChainedWith 276
         0s000101us (       11calls)     ArrangeBySelf: Variable: outputs::no_undef::ChainedWith 263
         0s000092us (       11calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file) by (interum, file) 250
         0s000061us (        6calls)     Map: Variable: outputs::no_undef::ChainedWith 280
         0s000045us (        6calls)     FlatMap: local (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 216
         0s000043us (        6calls)     FlatMap: local (outputs::no_undef::ChainedWith{.object=(_0: ast::ExprId), .property=(_: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*join*/ 220
         0s000042us (        6calls)     FlatMap: arrange __Prefix_7[(file, config)], outputs::no_undef::ChainedWith(.object=object, .property=interum, .file=file) by (interum, file) 248
         0s000039us (        6calls)     Join: __Prefix_7[(file, config)], inputs::BracketAccess(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=object}, .prop=ddlog_std::Some{.x=property}) 233
         0s000038us (        6calls)     AsCollection: Variable: outputs::no_undef::ChainedWith 278
         0s000034us (       10calls)     Feedback: Variable: outputs::no_undef::ChainedWith 210
         0s000022us (       13calls)     Concatenate: 255
         0s000017us (        7calls)     Map: Variable: outputs::no_undef::ChainedWith 261
         0s000016us (        8calls)     Map: Variable: outputs::no_undef::ChainedWith 274
         0s000010us (       14calls)     Concatenate: Variable: outputs::no_undef::ChainedWith 271
         0s000009us (        6calls)     Filter: 211
         0s000007us (        9calls)     Concatenate: 242
         0s000006us (        2calls)     Map: 228
         0s000004us (       10calls)     Concatenate: 236
         0s000003us (        6calls)     AsCollection: Variable: outputs::no_undef::ChainedWith 267
         0s000003us (        2calls)     Map: 225
         0s000002us (        8calls)     Concatenate: 213
         0s000002us (        2calls)     Map: 231
         0s000001us (        2calls)     Map: Variable: outputs::no_undef::ChainedWith 269
         0s000000us (        0calls)     Map: 208
       0s000715us (       82calls)     Arrange: global (name_in_scope::NameOccursInScope{.scope=(_2: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_0: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 569
       0s000528us (       82calls)     Arrange: global (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_2: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*semijoin*/ 565
       0s000485us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=_0, .name=_2, .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1557
       0s000475us (       78calls)     FlatMap: global (name_in_scope::NameOccursInScope{.scope=(_2: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_0: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*join*/ 567
       0s000414us (        5calls)     Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Expression) /*join*/ 159
       0s000393us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=_0, .name=(_: internment::Intern<string>), .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1561
       0s000365us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1504
       0s000365us (        9calls)     recursive component: 1061
         0s000026us (        6calls)     Join: __Prefix_2[(file, config, type_of, expr)], inputs::Expression(.id=expr, .file=file, .kind=ast::ExprGrouping{.inner=ddlog_std::Some{.x=grouped}}, .scope=_, .span=_) 998
         0s000022us (        6calls)     Join: __Prefix_4[(file, config)], inputs::UnaryOp(.expr_id=type_of, .file=file, .op=ddlog_std::Some{.x=ast::UnaryTypeof{}}, .expr=ddlog_std::Some{.x=expr}) 992
         0s000018us (        5calls)     Join: __Prefix_2[(file, config, type_of, expr)], inputs::Expression(.id=expr, .file=file, .kind=ast::ExprSequence{.exprs=sequence}, .scope=_, .span=_) 1004
         0s000018us (        5calls)     Join: __Prefix_4[(file, config)], outputs::typeof_undef::WithinTypeofExpr(.type_of=type_of, .expr=expr, .file=file) 986
         0s000014us (        4calls)     Reduce: Variable: outputs::typeof_undef::WithinTypeofExpr 1020
         0s000012us (        4calls)     Reduce: Variable: __Prefix_2 1042
         0s000007us (        4calls)     Arrange: local ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId)) /*join*/ 968
         0s000007us (        4calls)     ArrangeBySelf: Variable: outputs::typeof_undef::WithinTypeofExpr 1018
         0s000005us (        4calls)     Arrange: local (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 972
         0s000005us (        4calls)     Consolidate: Variable: outputs::typeof_undef::WithinTypeofExpr 1031
         0s000004us (        4calls)     Consolidate: Variable: __Prefix_2 1053
         0s000004us (        4calls)     ArrangeBySelf: Variable: __Prefix_2 1040
         0s000003us (        2calls)     Map: 984
         0s000003us (        2calls)     Map: 975
         0s000002us (        5calls)     Concatenate: 1007
         0s000002us (        4calls)     Feedback: Variable: __Prefix_2 951
         0s000001us (        5calls)     Concatenate: 954
         0s000001us (        5calls)     Concatenate: 1001
         0s000001us (        5calls)     Concatenate: 989
         0s000001us (        5calls)     Concatenate: 995
         0s000001us (        4calls)     Concatenate: Variable: __Prefix_2 1048
         0s000001us (        5calls)     Concatenate: 963
         0s000001us (        4calls)     Concatenate: Variable: outputs::typeof_undef::WithinTypeofExpr 1026
         0s000000us (        4calls)     Feedback: Variable: outputs::typeof_undef::WithinTypeofExpr 960
         0s000000us (        0calls)     Filter: 952
         0s000000us (        0calls)     Map: Variable: outputs::typeof_undef::WithinTypeofExpr 1029
         0s000000us (        0calls)     Map: 981
         0s000000us (        0calls)     FlatMap: local ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId)) /*join*/ 966
         0s000000us (        0calls)     Map: Variable: outputs::typeof_undef::WithinTypeofExpr 1035
         0s000000us (        0calls)     Map: Variable: outputs::typeof_undef::WithinTypeofExpr 1016
         0s000000us (        0calls)     Map: Variable: __Prefix_2 1046
         0s000000us (        0calls)     Map: 949
         0s000000us (        0calls)     Map: 958
         0s000000us (        0calls)     AsCollection: Variable: __Prefix_2 1055
         0s000000us (        0calls)     Map: Variable: __Prefix_2 1057
         0s000000us (        0calls)     AsCollection: Variable: outputs::typeof_undef::WithinTypeofExpr 1033
         0s000000us (        0calls)     AsCollection: Variable: outputs::typeof_undef::WithinTypeofExpr 1022
         0s000000us (        0calls)     Map: Variable: outputs::typeof_undef::WithinTypeofExpr 1024
         0s000000us (        0calls)     Map: Variable: __Prefix_2 1038
         0s000000us (        0calls)     Map: 978
         0s000000us (        0calls)     FlatMap: local (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_: ast::ExprId), .file=(_0: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 970
         0s000000us (        0calls)     Filter: 961
         0s000000us (        0calls)     AsCollection: Variable: __Prefix_2 1044
         0s000000us (        0calls)     Map: Variable: __Prefix_2 1051
       0s000352us (       72calls)     Arrange: global (outputs::no_shadow::DeclarationInDescendent{.file=(_0: ast::FileId), .scope=(_1: ast::ScopeId), .name=(_2: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1350
       0s000348us (        5calls)     Arrange: (inputs::Expression{.id=(_: ast::ExprId), .file=_0, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 151
       0s000328us (        5calls)     Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 135
       0s000306us (       78calls)     FlatMap: global (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_2: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*semijoin*/ 561
       0s000305us (        5calls)     Arrange: (inputs::Expression{.id=_0, .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 155
       0s000301us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1502
       0s000297us (       71calls)     Consolidate: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1523
       0s000271us (       69calls)     FlatMap: global (outputs::no_shadow::DeclarationInDescendent{.file=(_0: ast::FileId), .scope=(_1: ast::ScopeId), .name=(_2: internment::Intern<string>), .id=(_: ast::AnyId)}: outputs::no_shadow::DeclarationInDescendent) /*join*/ 1348
       0s000270us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdStmt{.stmt=(_: ast::StmtId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1543
       0s000269us (       71calls)     ArrangeBySelf: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1510
       0s000265us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=_2, .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1535
       0s000265us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1506
       0s000261us (       72calls)     Arrange: global (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 821
       0s000258us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=_0, .name=_2, .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1555
       0s000249us (        2calls)     FlatMap: (inputs::Expression{.id=(_: ast::ExprId), .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Expression) /*join*/ 157
       0s000246us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1541
       0s000239us (        5calls)     Reduce: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 291
       0s000237us (        8calls)     recursive component: 2108
         0s000028us (        5calls)     Join: inputs::InputScope(.parent=interum, .child=child, .file=file), scopes::ScopeFamily(.parent=parent, .child=interum, .file=file) 2076
         0s000022us (        5calls)     Join: scopes::NeedsScopeChildren(.scope=parent, .file=file), inputs::InputScope(.parent=parent, .child=child, .file=file) 2064
         0s000017us (        4calls)     Reduce: Variable: scopes::ScopeFamily 2089
         0s000014us (        6calls)     Join: scopes::NeedsScopeParents(.scope=child, .file=file), inputs::InputScope(.parent=parent, .child=child, .file=file) 2070
         0s000010us (        4calls)     Arrange: local (scopes::ScopeFamily{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2050
         0s000007us (        4calls)     ArrangeBySelf: Variable: scopes::ScopeFamily 2087
         0s000005us (        4calls)     Consolidate: Variable: scopes::ScopeFamily 2100
         0s000003us (        2calls)     Map: 2053
         0s000002us (        2calls)     Map: 2056
         0s000002us (        5calls)     Concatenate: 2045
         0s000002us (        4calls)     Feedback: Variable: scopes::ScopeFamily 2042
         0s000001us (        5calls)     Concatenate: 2067
         0s000001us (        4calls)     Concatenate: Variable: scopes::ScopeFamily 2095
         0s000001us (        4calls)     Concatenate: 2079
         0s000001us (        4calls)     Concatenate: 2073
         0s000000us (        0calls)     Filter: 2043
         0s000000us (        0calls)     Map: Variable: scopes::ScopeFamily 2085
         0s000000us (        0calls)     Map: Variable: scopes::ScopeFamily 2093
         0s000000us (        0calls)     Map: Variable: scopes::ScopeFamily 2104
         0s000000us (        0calls)     Map: Variable: scopes::ScopeFamily 2098
         0s000000us (        0calls)     AsCollection: Variable: scopes::ScopeFamily 2091
         0s000000us (        0calls)     Map: 2059
         0s000000us (        0calls)     AsCollection: Variable: scopes::ScopeFamily 2102
         0s000000us (        0calls)     Map: 2062
         0s000000us (        0calls)     Map: 2040
         0s000000us (        0calls)     FlatMap: local (scopes::ScopeFamily{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2048
       0s000220us (        5calls)     Concatenate: concatenate rules for inputs::Expression 131
       0s000219us (        5calls)     Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_: ast::ScopeId), .file=_0}: inputs::InputScope) /*join*/ 428
       0s000214us (       71calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdStmt{.stmt=(_: ast::StmtId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1545
       0s000205us (        5calls)     Arrange: (inputs::InputScope{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 420
       0s000200us (       68calls)     Map: 1476
       0s000200us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1537
       0s000199us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=_2, .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1531
       0s000194us (        7calls)     Join: __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name) 1928
       0s000185us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdClass{.class=(_: ast::ClassId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1547
       0s000179us (        5calls)     Arrange: (inputs::InputScope{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: inputs::InputScope) /*join*/ 432
       0s000179us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=_0, .name=(_: internment::Intern<string>), .scope=_1, .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1559
       0s000166us (        2calls)     FlatMap: head of scopes::ScopeOfId(.id=ast::AnyIdExpr{.expr=id}, .file=file, .scope=scope) :- inputs::Expression(.id=id, .file=file, .kind=_, .scope=scope, .span=_). 910
       0s000163us (        7calls)     Join: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) 1573
       0s000162us (        5calls)     Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=_0, .file=_1}: inputs::InputScope) /*join*/ 424
       0s000145us (        5calls)     Arrange: (inputs::EveryScope{.scope=(_: ast::ScopeId), .file=_0}: inputs::EveryScope) /*join*/ 116
       0s000143us (       68calls)     FlatMap: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdFunc{.func=(_: ast::FuncId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1551
       0s000137us (        2calls)     FlatMap: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 133
       0s000136us (        2calls)     FlatMap: (inputs::Expression{.id=_0, .file=_1, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 153
       0s000132us (        5calls)     Arrange: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 416
       0s000127us (        7calls)     Join: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) 1674
       0s000127us (        2calls)     FlatMap: (inputs::Expression{.id=(_: ast::ExprId), .file=_0, .kind=(_: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 149
       0s000124us (        7calls)     Join: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in) 1894
       0s000122us (        5calls)     Arrange: (inputs::DotAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(_: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::DotAccess) /*join*/ 109
       0s000122us (       10calls)     Concatenate: 1106
       0s000118us (        6calls)     Join: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name) 1667
       0s000111us (        6calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) by (file, name, scope) 1610
       0s000109us (        2calls)     FlatMap: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprNameRef{}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 137
       0s000109us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) by (file, name, used_scope) 1915
       0s000107us (        7calls)     Join: __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})) 1362
       0s000105us (        6calls)     Join: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) 1566
       0s000102us (        2calls)     FlatMap: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprGrouping{.inner=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 141
       0s000101us (        7calls)     Join: __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) 1953
       0s000101us (        2calls)     FlatMap: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprSequence{.exprs=(_: ddlog_std::Vec<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 145
       0s000100us (        6calls)     Join: __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_) 1946
       0s000099us (       78calls)     Map: 535
       0s000097us (        7calls)     Concatenate: 896
       0s000093us (        6calls)     Join: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) 1887
       0s000092us (        5calls)     Arrange: (inputs::Statement{.id=(_: ast::StmtId), .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Statement) /*join*/ 650
       0s000092us (        2calls)     AsCollection: 2260
       0s000089us (       68calls)     FlatMap: global (scopes::FunctionLevelScope{.scope=(_0: ast::ScopeId), .nearest=(_: ast::ScopeId), .file=(_1: ast::FileId), .id=(_: ast::AnyId)}: scopes::FunctionLevelScope) /*join*/ 819
       0s000087us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1259
       0s000086us (       10calls)     ArrangeBySelf: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 289
       0s000083us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1892
       0s000082us (       61calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdClass{.class=(_: ast::ClassId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1549
       0s000081us (       11calls)     Consolidate: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 302
       0s000075us (        5calls)     ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (undefined_expr, file) 1679
       0s000073us (        5calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1571
       0s000072us (        2calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) by (file, name, scope) 1608
       0s000070us (        5calls)     ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name) by (undefined_expr, file) 1672
       0s000070us (       78calls)     Map: global (name_in_scope::NameOccursInScope{.scope=(_0: ast::ScopeId), .name=((&(name_in_scope::NameOccurrence{.name=(_1: internment::Intern<string>), .file=(_2: ast::FileId)}: name_in_scope::NameOccurrence)): internment::Intern<name_in_scope::NameOccurrence>)}: name_in_scope::NameOccursInScope) /*semijoin*/ 563
       0s000069us (        5calls)     Arrange: (inputs::Statement{.id=_0, .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 646
       0s000069us (        5calls)     Arrange: (inputs::NameRef{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 476
       0s000069us (        7calls)     Join: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) 1598
       0s000068us (        2calls)     FlatMap: inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements) 1205
       0s000067us (        2calls)     FlatMap: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (undefined_expr, file) 1677
       0s000066us (        2calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (expr, file) 1576
       0s000066us (        4calls)     Join: outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=(name.data), .scope=body_scope) 2120
       0s000065us (        2calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1569
       0s000065us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name) by (expr, file) 1890
       0s000065us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in) by (file, expr) 1897
       0s000064us (        2calls)     FlatMap: (inputs::DotAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(_: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::DotAccess) /*join*/ 107
       0s000063us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in) by (file, expr) 1899
       0s000062us (        2calls)     FlatMap: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name) by (undefined_expr, file) 1670
       0s000060us (        5calls)     Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 638
       0s000060us (        2calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) by (expr, file) 1592
       0s000059us (       68calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1508
       0s000058us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) by (file, name, used_scope) 1913
       0s000058us (        2calls)     FlatMap: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})) by (file, shadowed_scope, name) 1365
       0s000057us (        7calls)     Join: inputs::File(.id=file, .kind=_, .top_level_scope=file_scope, .config=_), inputs::ImplicitGlobal(.id=global, .name=name, .privileges=_) 1108
       0s000057us (       69calls)     Map: 1322
       0s000057us (        2calls)     FlatMap: (inputs::InputScope{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 418
       0s000056us (        5calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span) by (expr, file) 1578
       0s000055us (        5calls)     Arrange: (inputs::NameRef{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 472
       0s000055us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1233
       0s000054us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1237
       0s000053us (        2calls)     FlatMap: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_: ast::ScopeId), .file=_0}: inputs::InputScope) /*join*/ 426
       0s000053us (        2calls)     AsCollection: 2292
       0s000052us (        2calls)     FlatMap: (inputs::NameRef{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 474
       0s000052us (        5calls)     ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})) by (file, shadowed_scope, name) 1367
       0s000052us (        2calls)     FlatMap: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: inputs::InputScope) /*join*/ 414
       0s000051us (        2calls)     FlatMap: (inputs::InputScope{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: inputs::InputScope) /*join*/ 430
       0s000051us (        2calls)     FlatMap: (inputs::InputScope{.parent=(_: ast::ScopeId), .child=_0, .file=_1}: inputs::InputScope) /*join*/ 422
       0s000051us (        6calls)     Map: 259
       0s000050us (        2calls)     FlatMap: (inputs::EveryScope{.scope=(_: ast::ScopeId), .file=_0}: inputs::EveryScope) /*join*/ 114
       0s000047us (        5calls)     Arrange: (inputs::Call{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .callee=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::Call) /*join*/ 65
       0s000047us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Unhoistable{.scope=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1249
       0s000047us (        5calls)     Arrange: (inputs::File{.id=(_: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 170
       0s000047us (        5calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) by (expr, file) 1594
       0s000046us (        5calls)     Arrange: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 308
       0s000046us (        2calls)     FlatMap: (inputs::Assign{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 32
       0s000046us (       68calls)     Map: 793
       0s000045us (        2calls)     FlatMap: (inputs::NameRef{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .value=(_: internment::Intern<string>)}: inputs::NameRef) /*join*/ 470
       0s000044us (        7calls)     Join: __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name) 1960
       0s000044us (        9calls)     Join: __Prefix_8[(file, config)], var_decls::VariableDeclarations(.file=file, .name=_, .scope=var_decls::Unhoistable{.scope=scope}, .declared_in=declared, .meta=_) 1270
       0s000044us (        4calls)     Arrange: (inputs::UserGlobal{.id=(_: ast::GlobalId), .file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::UserGlobal) /*join*/ 1096
       0s000044us (       68calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1521
       0s000043us (       68calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1539
       0s000043us (        2calls)     FlatMap: head of scopes::ScopeOfId(.id=ast::AnyIdStmt{.stmt=id}, .file=file, .scope=scope) :- inputs::Statement(.id=id, .file=file, .kind=_, .scope=scope, .span=_). 907
       0s000042us (       68calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=_2, .declared=(_3: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1533
       0s000042us (        3calls)     FlatMap: head of name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=scope, .declared=declared) :- var_decls::VariableDeclarations(.file=file, .name=name, .scope=var_decls::Unhoistable{.scope=scope}, .declared_in=declared, .meta=_). 1389
       0s000042us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_) by (expr, file) 1951
       0s000041us (        6calls)     Join: inputs::Function(.id=func, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=span}}, .scope=func_scope, .body=_, .exported=_), scopes::FunctionLevelScope(.scope=func_scope, .nearest=nearest_scope, .file=file, .id=_) 1158
       0s000040us (        5calls)     Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprNameRef{}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 139
       0s000040us (        2calls)     AsCollection: 2272
       0s000040us (       71calls)     Concatenate: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1518
       0s000038us (        5calls)     Concatenate: concatenate rules for inputs::InputScope 412
       0s000038us (        7calls)     Arrange: ThresholdTotal: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1399
       0s000038us (        9calls)     Join: __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id) 1355
       0s000037us (        2calls)     FlatMap: (inputs::Statement{.id=(_: ast::StmtId), .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=_0}: inputs::Statement) /*join*/ 648
       0s000037us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) by (callee, file) 1958
       0s000036us (        2calls)     FlatMap: inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps((internment::ival(elem))))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((vec::flatmap(params, (function(param: ast::FuncParam):ddlog_std::Vec<(ast::Spanned<internment::Intern<string>>, bool)>{(ast::bound_vars(param))})))) 1214
       0s000035us (        6calls)     FlatMap: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 285
       0s000035us (        2calls)     AsCollection: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1612
       0s000033us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_) by (expr, file) 1949
       0s000031us (        7calls)     Join: __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) 600
       0s000031us (        7calls)     Join: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) 1903
       0s000031us (        2calls)     AsCollection: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) 1580
       0s000031us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1241
       0s000031us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1231
       0s000030us (        2calls)     FlatMap: (inputs::Call{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .callee=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::Call) /*join*/ 63
       0s000030us (        2calls)     FlatMap: (inputs::Statement{.id=_0, .file=_1, .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 644
       0s000029us (        2calls)     FlatMap: head of outputs::no_undef::NoUndef(.name=name, .scope=scope, .span=span, .file=file) :- __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_). 1624
       0s000029us (        2calls)     AsCollection: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) 1596
       0s000029us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in) by (callee, file) 1956
       0s000028us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1257
       0s000028us (        5calls)     Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_1: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1280
       0s000027us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1235
       0s000027us (        2calls)     FlatMap: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_1: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1278
       0s000027us (        7calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1245
       0s000027us (        2calls)     FlatMap: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 636
       0s000027us (        2calls)     AsCollection: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) 1901
       0s000026us (        5calls)     Join: inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps((internment::ival(elem))))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1211
       0s000025us (        5calls)     Arrange: ThresholdTotal: outputs::no_undef::NoUndef.threshold_total 1660
       0s000025us (        5calls)     Join: inputs::ConstDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1135
       0s000024us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_1: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1239
       0s000024us (        2calls)     AsCollection: 2256
       0s000024us (        2calls)     AsCollection: 2276
       0s000024us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_2: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=(_: bool), .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1243
       0s000023us (        5calls)     ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id) by (file, shadowed_id) 1360
       0s000023us (        2calls)     FlatMap: inputs::ConstDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))) 1138
       0s000022us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Unhoistable{.scope=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1247
       0s000022us (        5calls)     Concatenate: concatenate rules for inputs::Statement 634
       0s000021us (        6calls)     Arrange: (inputs::ImplicitGlobal{.id=(_: ast::GlobalId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::ImplicitGlobal) /*join*/ 376
       0s000021us (        2calls)     AsCollection: 2248
       0s000020us (        3calls)     FlatMap: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1395
       0s000020us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1255
       0s000019us (        4calls)     Reduce: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1068
       0s000019us (        5calls)     Arrange: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1405
       0s000019us (        5calls)     Join: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) 1582
       0s000019us (        5calls)     Join: inputs::ImportDecl(.id=import_id, .file=file, .clause=clause), inputs::File(.id=file, .kind=_, .top_level_scope=file_scope, .config=_) 1116
       0s000019us (        6calls)     Join: inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), scopes::FunctionLevelScope(.scope=stmt_scope, .nearest=nearest_scope, .file=file, .id=_) 1150
       0s000019us (        7calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope) 1802
       0s000018us (        5calls)     Probe: 2262
       0s000018us (        5calls)     Join: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file) 1681
       0s000018us (        2calls)     AsCollection: 2264
       0s000018us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Hoistable{.hoisted=(_: ast::ScopeId), .unhoisted=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1251
       0s000018us (        3calls)     FlatMap: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(ast::AnyIdGlobal{.global=(_: ast::GlobalId)}: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1263
       0s000018us (        5calls)     Join: inputs::ArrowParam(.expr_id=expr, .file=file, .param=pat), inputs::Arrow(.expr_id=expr, .file=file, .body=ddlog_std::Some{.x=(_, body_scope)}) 1170
       0s000018us (        5calls)     Arrange: (inputs::ConstDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::ConstDecl) /*join*/ 92
       0s000018us (        2calls)     FlatMap: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(ast::StmtVarDecl{}: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 640
       0s000018us (        4calls)     FlatMap: (inputs::ImplicitGlobal{.id=(_: ast::GlobalId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::ImplicitGlobal) /*join*/ 374
       0s000017us (        5calls)     Arrange: (variable_decl::VariableDecl{.stmt=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: variable_decl::VariableDeclKind), .pattern=(_: ddlog_std::Option<ast::IPattern>), .value=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: variable_decl::VariableDecl) /*join*/ 1882
       0s000017us (        7calls)     Join: __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], inputs::Class(.id=class, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=declared_in}}, .parent=_, .elements=_, .scope=declared_scope, .exported=_) 2003
       0s000017us (        7calls)     Join: __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})) 1935
       0s000016us (        4calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope) 878
       0s000016us (        6calls)     Join: __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_) 593
       0s000016us (        6calls)     Join: __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_) 1992
       0s000016us (        5calls)     Join: inputs::ImportDecl(.id=id, .file=file, .clause=_), inputs::File(.id=file, .kind=_, .top_level_scope=scope, .config=_) 913
       0s000016us (        5calls)     Join: __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id) 1369
       0s000016us (        5calls)     Join: inputs::LetDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1127
       0s000016us (        5calls)     ThresholdTotal: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 584
       0s000016us (        8calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})) 1757
       0s000016us (        7calls)     Join: __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=object, .file=file, .value=name) 615
       0s000016us (        6calls)     Join: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_) 1627
       0s000016us (        7calls)     Join: __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})), inputs::Class(.id=class, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=_, .span=declared_in}}, .parent=_, .elements=_, .scope=decl_scope, .exported=_) 1942
       0s000015us (        7calls)     Join: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})) 1917
       0s000015us (        7calls)     Join: __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_) 1985
       0s000015us (        6calls)     Map: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 287
       0s000015us (        5calls)     Join: __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id), (shadowed_id != shadower_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadower_scope_raw, .declared_in=shadower_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadower_span}})) 1376
       0s000015us (        8calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})) 1795
       0s000015us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_) 2150
       0s000015us (        5calls)     Join: inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=_) 1738
       0s000015us (        7calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})) 1824
       0s000015us (        2calls)     AsCollection: 2280
       0s000015us (        8calls)     Map: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 300
       0s000014us (        5calls)     ThresholdTotal: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1401
       0s000014us (        2calls)     AsCollection: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 304
       0s000014us (        7calls)     Join: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1614
       0s000014us (        2calls)     FlatMap: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements) by (body, file) 1207
       0s000014us (        5calls)     Arrange: (inputs::BracketAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::BracketAccess) /*join*/ 51
       0s000014us (        7calls)     Join: __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_), inputs::Expression(.id=class, .file=file, .kind=_, .scope=decl_scope, .span=declared_in) 1999
       0s000014us (        7calls)     Join: __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})) 1978
       0s000014us (        2calls)     Map: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 580
       0s000013us (        6calls)     Join: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1690
       0s000013us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) 826
       0s000013us (        7calls)     Join: __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})) 1967
       0s000013us (        5calls)     ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1933
       0s000013us (        5calls)     Join: outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file), outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=(name.data), .scope=child_scope) 2131
       0s000013us (        2calls)     FlatMap: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id) by (file, shadowed_id) 1358
       0s000013us (        3calls)     Reduce: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1512
       0s000013us (        6calls)     Join: inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id) 1731
       0s000013us (        5calls)     Join: outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file) 2124
       0s000013us (        2calls)     FlatMap: inputs::ImportDecl(.id=import_id, .file=file, .clause=clause), inputs::File(.id=file, .kind=_, .top_level_scope=file_scope, .config=_), var imported = FlatMap((ast::free_variables(clause))) 1119
       0s000013us (        4calls)     Arrange: (config::EnableNoUnusedVars{.file=(_0: ast::FileId), .config=(_: ddlog_std::Ref<config::NoUnusedVarsConfig>)}: config::EnableNoUnusedVars) /*join*/ 6
       0s000013us (        5calls)     Join: inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps(val))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1223
       0s000013us (        5calls)     Arrange: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1284
       0s000012us (        5calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)) 2159
       0s000012us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=scope, .span=_) 833
       0s000012us (        5calls)     Arrange: (inputs::Arrow{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 16
       0s000012us (        4calls)     Arrange: (inputs::ClassExpr{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>)}: inputs::ClassExpr) /*semijoin*/ 85
       0s000012us (        8calls)     Join: __Prefix_8[(file, config)], var_decls::VariableDeclarations(.file=file, .name=_, .scope=var_decls::Hoistable{.hoisted=hoisted_scope, .unhoisted=unhoisted_scope}, .declared_in=declared, .meta=_) 1274
       0s000012us (        6calls)     Join: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_) 1634
       0s000012us (        6calls)     Join: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})), inputs::Statement(.id=stmt, .file=file, .kind=ast::StmtVarDecl{}, .scope=declared_scope, .span=declared_in) 1924
       0s000012us (        6calls)     Join: __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})), inputs::Function(.id=func, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=_, .span=declared_in}}, .scope=decl_scope, .body=_, .exported=_) 1974
       0s000012us (        5calls)     ArrangeByKey: arrange inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements) by (body, file) 1209
       0s000012us (        4calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) 1833
       0s000012us (        5calls)     Arrange: ThresholdTotal: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 582
       0s000012us (        5calls)     Probe: 2274
       0s000012us (        2calls)     Map: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1622
       0s000011us (        5calls)     Probe: 2294
       0s000011us (        5calls)     Join: inputs::Try(.stmt_id=stmt, .file=file, .body=_, .handler=ast::TryHandler{.error=ddlog_std::Some{.x=error}, .body=ddlog_std::Some{.x=body}}, .finalizer=_), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1197
       0s000011us (        4calls)     Join: inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}) 1182
       0s000011us (        5calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}), inputs::Statement(.id=body_id, .file=file, .kind=_, .scope=body, .span=_) 670
       0s000011us (        4calls)     Join: inputs::FunctionArg(.parent_func=func, .file=file, .pattern=pat, .implicit=implicit), inputs::Function(.id=func, .file=file, .name=_, .scope=_, .body=body, .exported=_) 1162
       0s000011us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) 837
       0s000010us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_) by (expr, file) 598
       0s000010us (        5calls)     Join: inputs::UserGlobal(.id=global, .file=file, .name=name, .privileges=_), inputs::File(.id=file, .kind=_, .top_level_scope=file_scope, .config=_) 1112
       0s000010us (        5calls)     Arrange: (inputs::File{.id=_0, .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 174
       0s000010us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=body_scope) 448
       0s000010us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=scope, .span=_) 844
       0s000010us (        2calls)     Map: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 306
       0s000010us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::ConstDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdStmt{.stmt=stmt}), (var scope = var_decls::Unhoistable{.scope=stmt_scope}). 1140
       0s000010us (        6calls)     Join: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope) 869
       0s000010us (        2calls)     FlatMap: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1931
       0s000010us (        6calls)     Join: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1645
       0s000010us (        5calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), inputs::Arrow(.expr_id=id, .file=file, .body=ddlog_std::Some{.x=(_, body)}) 659
       0s000010us (        2calls)     Map: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) 1590
       0s000010us (        4calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared) 1811
       0s000009us (       11calls)     Concatenate: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 297
       0s000009us (        5calls)     Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 588
       0s000009us (        6calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1261
       0s000009us (        5calls)     Join: inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}), inputs::Statement(.id=body, .file=file, .kind=_, .scope=body_scope, .span=_) 1189
       0s000009us (        4calls)     Arrange: global (scopes::ScopeFamily{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: scopes::ScopeFamily) /*join*/ 2115
       0s000009us (        2calls)     AsCollection: 2252
       0s000009us (        5calls)     Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 606
       0s000009us (        2calls)     FlatMap: (variable_decl::VariableDecl{.stmt=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(_: variable_decl::VariableDeclKind), .pattern=(_: ddlog_std::Option<ast::IPattern>), .value=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: variable_decl::VariableDecl) /*join*/ 1880
       0s000009us (        2calls)     Map: outputs::no_undef::NoUndef.threshold_total 1658
       0s000009us (        5calls)     Join: inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) 1143
       0s000009us (        5calls)     Arrange: (inputs::Arrow{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 20
       0s000009us (        5calls)     Join: inputs::InlineFunc(.expr_id=expr, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=span}}, .body=ddlog_std::Some{.x=body}), inputs::Statement(.id=body, .file=file, .kind=_, .scope=body_scope, .span=_) 1178
       0s000009us (        2calls)     FlatMap: inputs::LetDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))) 1130
       0s000009us (        5calls)     Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprGrouping{.inner=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 143
       0s000008us (        4calls)     ThresholdTotal: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 860
       0s000008us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 184
       0s000008us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::Class(.id=class, .file=file, .name=_, .parent=_, .elements=ddlog_std::Some{.x=elements}, .scope=_, .exported=_), var elem = FlatMap(elements), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps((internment::ival(elem))))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((vec::flatmap(params, (function(param: ast::FuncParam):ddlog_std::Vec<(ast::Spanned<internment::Intern<string>>, bool)>{(ast::bound_vars(param))})))), ((ast::Spanned{.data=var name, .span=var span}, var implicit) = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=implicit, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdClass{.class=class}), (var scope = var_decls::Unhoistable{.scope=stmt_scope}). 1216
       0s000008us (        2calls)     Map: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) 1911
       0s000008us (        4calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), inputs::Function(.id=id, .file=file, .name=_, .scope=_, .body=body, .exported=_) 655
       0s000008us (        2calls)     Map: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) 1606
       0s000008us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 318
       0s000008us (        4calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) 1766
       0s000008us (        5calls)     Arrange: (inputs::ArrowParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::ArrowParam) /*join*/ 27
       0s000008us (        5calls)     Arrange: (inputs::File{.id=(_0: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 166
       0s000008us (        5calls)     Arrange: (inputs::Class{.id=(_0: ast::ClassId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 72
       0s000008us (        4calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}) 663
       0s000008us (        5calls)     Arrange: (inputs::LetDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::LetDecl) /*join*/ 465
       0s000008us (        5calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1965
       0s000008us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_2: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 621
       0s000008us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 328
       0s000008us (        5calls)     Arrange: (inputs::Try{.stmt_id=(_: ast::StmtId), .file=(_1: ast::FileId), .body=(_: ddlog_std::Option<ast::StmtId>), .handler=(ast::TryHandler{.error=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: ast::TryHandler), .finalizer=(_: ddlog_std::Option<ast::StmtId>)}: inputs::Try) /*join*/ 937
       0s000008us (        5calls)     Arrange: (inputs::Class{.id=(_: ast::ClassId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_1: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 76
       0s000008us (        5calls)     Concatenate: concatenate rules for inputs::Arrow 12
       0s000007us (        4calls)     Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=_1, .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*semijoin*/ 852
       0s000007us (        4calls)     ThresholdTotal: outputs::no_unused_labels::UsedLabels.threshold_total 2139
       0s000007us (        4calls)     Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 1089
       0s000007us (        5calls)     Arrange: (inputs::ImportDecl{.id=(_: ast::ImportId), .file=(_0: ast::FileId), .clause=(_: ast::ImportClause)}: inputs::ImportDecl) /*join*/ 383
       0s000007us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 204
       0s000007us (        4calls)     Arrange: global (scopes::ScopeFamily{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2111
       0s000007us (        4calls)     ArrangeByKey: arrange inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) by (stmt_scope, file) 1148
       0s000007us (        4calls)     Arrange: (inputs::Break{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Break) /*join*/ 58
       0s000007us (        4calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}) by (body_id, file) 668
       0s000007us (        4calls)     Arrange: (inputs::Continue{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Continue) /*join*/ 99
       0s000007us (        5calls)     Concatenate: concatenate rules for inputs::File 162
       0s000007us (        4calls)     Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::StmtId), ((ast::Spanned{.data=_1, .span=_}: ast::Spanned{data: ast::Name, span: ast::Span}): ast::Spanned<ast::Name>), (_2: ast::ScopeId)) /*join*/ 454
       0s000007us (        2calls)     FlatMap: (inputs::Assign{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 36
       0s000007us (        2calls)     FlatMap: head of variable_decl::VariableDecl(.stmt=stmt, .file=file, .kind=variable_decl::VarDeclConst{}, .pattern=pattern, .value=value, .exported=exported) :- inputs::ConstDecl(.stmt_id=stmt, .file=file, .pattern=pattern, .value=value, .exported=exported). 1877
       0s000007us (        4calls)     ArrangeBySelf: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1066
       0s000007us (        3calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared) 1849
       0s000007us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config)) /*join*/ 194
       0s000006us (        5calls)     Arrange: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*join*/ 576
       0s000006us (        4calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1829
       0s000006us (        4calls)     ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 831
       0s000006us (        2calls)     FlatMap: (inputs::Class{.id=(_0: ast::ClassId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 70
       0s000006us (        4calls)     Arrange: (outputs::no_unused_labels::UsedLabels{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .label_name=_2}: outputs::no_unused_labels::UsedLabels) /*antijoin*/ 2145
       0s000006us (        4calls)     Arrange: ThresholdTotal: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 858
       0s000006us (        5calls)     Probe: 2250
       0s000006us (        5calls)     Concatenate: concatenate rules for inputs::NameRef 468
       0s000006us (        8calls)     Concatenate: 1710
       0s000006us (        4calls)     Arrange: ThresholdTotal: outputs::no_unused_labels::UsedLabels.threshold_total 2137
       0s000006us (        2calls)     FlatMap: (inputs::Arrow{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 14
       0s000006us (        4calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))) by (file, declared) 1762
       0s000006us (        2calls)     FlatMap: (inputs::ConstDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::ConstDecl) /*join*/ 90
       0s000006us (        4calls)     Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 359
       0s000006us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 610
       0s000006us (        4calls)     Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 443
       0s000006us (        4calls)     Arrange: (inputs::Expression{.id=(_0: ast::ExprId), .file=(_1: ast::FileId), .kind=(ast::ExprSequence{.exprs=(_: ddlog_std::Vec<ast::ExprId>)}: ast::ExprKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Expression) /*join*/ 147
       0s000006us (        4calls)     ArrangeByKey: arrange inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}) by (body, file) 1187
       0s000006us (        2calls)     FlatMap: head of variable_decl::VariableDecl(.stmt=stmt, .file=file, .kind=variable_decl::VarDeclLet{}, .pattern=pattern, .value=value, .exported=exported) :- inputs::LetDecl(.stmt_id=stmt, .file=file, .pattern=pattern, .value=value, .exported=exported). 1874
       0s000006us (        4calls)     Arrange: (scopes::NeedsScopeChildren{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeChildren) /*join*/ 893
       0s000006us (        2calls)     FlatMap: (outputs::no_shadow::ScopeOfDecl{.file=(_0: ast::FileId), .scope=(_: ast::ScopeId), .declared=(_: ast::AnyId)}: outputs::no_shadow::ScopeOfDecl) /*join*/ 1282
       0s000006us (        8calls)     Concatenate: 1387
       0s000006us (        4calls)     Arrange: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1085
       0s000006us (        5calls)     Arrange: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 625
       0s000006us (        4calls)     Arrange: (outputs::unused_vars::FunctionBodyScope{.file=(_0: ast::FileId), .id=(_1: ast::AnyId), .body=(_: ast::ScopeId)}: outputs::unused_vars::FunctionBodyScope) /*join*/ 676
       0s000006us (        5calls)     Concatenate: concatenate rules for inputs::Assign 30
       0s000006us (        5calls)     Arrange: ThresholdTotal: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1746
       0s000006us (        4calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_) by (expr, file) 1632
       0s000006us (        4calls)     ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file) by (file, (name.data), child_scope) 2129
       0s000006us (        4calls)     Arrange: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(_: ast::Spanned<ast::Name>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 439
       0s000005us (        4calls)     Arrange: (inputs::UnaryOp{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .op=(ddlog_std::Some{.x=(ast::UnaryTypeof{}: ast::UnaryOperand)}: ddlog_std::Option<ast::UnaryOperand>), .expr=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::UnaryOp) /*join*/ 944
       0s000005us (        4calls)     Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 347
       0s000005us (        4calls)     Arrange: (inputs::Assign{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 38
       0s000005us (        4calls)     ArrangeByKey: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file) by (file, name, scope) 1686
       0s000005us (        5calls)     Concatenate: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) 1587
       0s000005us (        5calls)     Probe: 2258
       0s000005us (        4calls)     Arrange: (inputs::VarDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::VarDecl) /*join*/ 1103
       0s000005us (        4calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(var_decls::Hoistable{.hoisted=(_: ast::ScopeId), .unhoisted=(_: ast::ScopeId)}: var_decls::DeclarationScope), .declared_in=(_: ast::AnyId), .meta=(_: ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1253
       0s000005us (        4calls)     ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope) by (file, name, export_scope) 1729
       0s000005us (        4calls)     Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 394
       0s000005us (        3calls)     Map: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1397
       0s000005us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::ImportDecl(.id=import_id, .file=file, .clause=clause), inputs::File(.id=file, .kind=_, .top_level_scope=file_scope, .config=_), var imported = FlatMap((ast::free_variables(clause))), (ast::Spanned{.data=var name, .span=var span} = imported), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdImport{.import_=import_id}), (var scope = var_decls::Unhoistable{.scope=file_scope}). 1121
       0s000005us (        5calls)     Probe: 2266
       0s000005us (        4calls)     ThresholdTotal: outputs::no_unused_labels::NoUnusedLabels.threshold_total 2176
       0s000005us (        3calls)     FlatMap: head of name_in_scope::ScopeOfDeclName(.file=file, .name=name, .scope=scope, .declared=declared) :- var_decls::VariableDeclarations(.file=file, .name=name, .scope=var_decls::Hoistable{.hoisted=scope, .unhoisted=_}, .declared_in=declared, .meta=_). 1392
       0s000005us (        4calls)     Arrange: (inputs::Statement{.id=(_0: ast::StmtId), .file=(_1: ast::FileId), .kind=(ast::StmtVarDecl{}: ast::StmtKind), .scope=(_: ast::ScopeId), .span=(_: ast::Span)}: inputs::Statement) /*join*/ 642
       0s000005us (        6calls)     Concatenate: 1564
       0s000005us (        5calls)     Concatenate: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) 1908
       0s000005us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name) by (file, name, used_scope) 1963
       0s000005us (        4calls)     Arrange: ((_1: ast::FileId), (_: config::Config), (_: ast::StmtId), (_: ast::Spanned<ast::Name>), (_0: ast::ScopeId)) /*join*/ 458
       0s000005us (        4calls)     ArrangeByKey: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 1221
       0s000005us (        4calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1800
       0s000005us (        4calls)     Arrange: (inputs::Assign{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .lhs=(ddlog_std::Some{.x=(ddlog_std::Left{.l=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Either<internment::Intern<ast::Pattern>,ast::ExprId>)}: ddlog_std::Option<ddlog_std::Either<ast::IPattern,ast::ExprId>>), .rhs=(_: ddlog_std::Option<ast::ExprId>), .op=(_: ddlog_std::Option<ast::AssignOperand>)}: inputs::Assign) /*join*/ 34
       0s000005us (        4calls)     ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 842
       0s000005us (        7calls)     Concatenate: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1619
       0s000005us (        3calls)     Join: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared) 1782
       0s000005us (        4calls)     ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_) by (stmt, file, (name.data)) 2155
       0s000005us (        4calls)     Arrange: (inputs::FunctionArg{.parent_func=(_0: ast::FuncId), .file=(_1: ast::FileId), .pattern=(_: internment::Intern<ast::Pattern>), .implicit=(_: bool)}: inputs::FunctionArg) /*join*/ 366
       0s000005us (        4calls)     Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 390
       0s000005us (        4calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope) by (file, name, body_scope, declared) 1807
       0s000005us (        4calls)     Arrange: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 351
       0s000005us (        5calls)     Probe: 2278
       0s000005us (        2calls)     FlatMap: inputs::ArrowParam(.expr_id=expr, .file=file, .param=pat), inputs::Arrow(.expr_id=expr, .file=file, .body=ddlog_std::Some{.x=(_, body_scope)}), var bound = FlatMap((ast::bound_vars(pat))) 1173
       0s000005us (        4calls)     ArrangeByKey: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))) by (file, name, scope) 1641
       0s000005us (        4calls)     Arrange: (inputs::Function{.id=(_: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_0: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 355
       0s000005us (        7calls)     Concatenate: 1268
       0s000005us (        4calls)     Arrange: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 864
       0s000005us (        4calls)     Arrange: (var_decls::VariableDeclarations{.file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .scope=(_: var_decls::DeclarationScope), .declared_in=(ast::AnyIdGlobal{.global=(_: ast::GlobalId)}: ast::AnyId), .meta=((&(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=(ddlog_std::Some{.x=(_: ast::Span)}: ddlog_std::Option<ast::Span>)}: var_decls::VariableMeta)): ddlog_std::Ref<var_decls::VariableMeta>)}: var_decls::VariableDeclarations) /*join*/ 1265
       0s000005us (        4calls)     Arrange: (inputs::InlineFunc{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 402
       0s000005us (        6calls)     Concatenate: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) 1603
       0s000005us (        6calls)     Concatenate: 1869
       0s000005us (        4calls)     Consolidate: consolidate 72 2180
       0s000005us (        4calls)     ArrangeByKey: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope) by (file, name, scope) 874
       0s000005us (        4calls)     Arrange: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 398
       0s000005us (        4calls)     Arrange: (inputs::InlineFuncParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::InlineFuncParam) /*join*/ 409
       0s000004us (        4calls)     Arrange: ThresholdTotal: outputs::no_unused_labels::NoUnusedLabels.threshold_total 2174
       0s000004us (        3calls)     ThresholdTotal: outputs::no_shadow::NoShadow.threshold_total 1384
       0s000004us (        5calls)     Concatenate: concatenate rules for inputs::Class 68
       0s000004us (        5calls)     Probe: 2282
       0s000004us (        4calls)     Consolidate: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1079
       0s000004us (        2calls)     Map: (name_in_scope::ScopeOfDeclName{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::ScopeOfDeclName) /*antijoin*/ 1403
       0s000004us (        5calls)     Concatenate: concatenate rules for inputs::While 2023
       0s000004us (        3calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(ast::AnyIdFunc{.func=(_: ast::FuncId)}: ast::AnyId)}: name_in_scope::NameInScope) /*join*/ 1553
       0s000004us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::LetDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdStmt{.stmt=stmt}), (var scope = var_decls::Unhoistable{.scope=stmt_scope}). 1132
       0s000004us (        2calls)     FlatMap: (inputs::ArrowParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::ArrowParam) /*join*/ 25
       0s000004us (        3calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::hoisted_scope(scope)), declared) 1778
       0s000004us (        4calls)     Consolidate: consolidate 71 2190
       0s000004us (        3calls)     Arrange: ThresholdTotal: outputs::no_shadow::NoShadow.threshold_total 1382
       0s000004us (        3calls)     ThresholdTotal: outputs::no_undef::NoUndef.threshold_total 1662
       0s000003us (        3calls)     ArrangeByKey: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id) by (file, name, id) 1736
       0s000003us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_2: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 619
       0s000003us (        7calls)     Concatenate: 1885
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::Array 9
       0s000003us (        2calls)     FlatMap: (inputs::Class{.id=(_: ast::ClassId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_1: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .parent=(_: ddlog_std::Option<ast::ExprId>), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>), .scope=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Class) /*join*/ 74
       0s000003us (        2calls)     FlatMap: (inputs::Break{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Break) /*join*/ 56
       0s000003us (        3calls)     ThresholdTotal: outputs::unused_vars::UnusedVariables.threshold_total 1866
       0s000003us (        3calls)     Arrange: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1529
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_) by (class, file) 1997
       0s000003us (        3calls)     ThresholdTotal: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1748
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})) by (func, file) 1972
       0s000003us (        3calls)     ThresholdTotal: outputs::use_before_def::UseBeforeDef.threshold_total 2011
       0s000003us (        3calls)     ThresholdTotal: outputs::typeof_undef::TypeofUndef.threshold_total 1707
       0s000003us (        6calls)     Concatenate: 591
       0s000003us (        3calls)     Arrange: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1752
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::Property 628
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})) by (decl, file) 1983
       0s000003us (        6calls)     Concatenate: 311
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_) by (class, file) 1990
       0s000003us (        2calls)     FlatMap: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1742
       0s000003us (        3calls)     Consolidate: consolidate 69 2240
       0s000003us (        3calls)     Arrange: ThresholdTotal: outputs::unused_vars::UnusedVariables.threshold_total 1864
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})) by (stmt, file) 1922
       0s000003us (        3calls)     Arrange: ThresholdTotal: outputs::typeof_undef::TypeofUndef.threshold_total 1705
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id), (shadowed_id != shadower_id) by (file, name, shadower_id) 1374
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::ConstDecl 88
       0s000003us (        3calls)     ArrangeByKey: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::unhoisted_scope(scope)), declared) 1845
       0s000003us (        2calls)     AsCollection: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 293
       0s000003us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::Class(.id=class, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=span}}, .parent=_, .elements=_, .scope=class_scope, .exported=_), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdClass{.class=class}), (var scope = var_decls::Unhoistable{.scope=class_scope}). 1124
       0s000003us (        3calls)     Arrange: ThresholdTotal: outputs::use_before_def::UseBeforeDef.threshold_total 2009
       0s000003us (        3calls)     ArrangeByKey: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})) by (class, file) 1940
       0s000003us (        5calls)     Probe: 2254
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::LetDecl 461
       0s000003us (        2calls)     FlatMap: (inputs::ImportDecl{.id=(_: ast::ImportId), .file=(_0: ast::FileId), .clause=(_: ast::ImportClause)}: inputs::ImportDecl) /*join*/ 381
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::SwitchCase 921
       0s000003us (        6calls)     Concatenate: 613
       0s000003us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::ArrowParam(.expr_id=expr, .file=file, .param=pat), inputs::Arrow(.expr_id=expr, .file=file, .body=ddlog_std::Some{.x=(_, body_scope)}), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdExpr{.expr=expr}), (var scope = var_decls::Unhoistable{.scope=body_scope}). 1175
       0s000003us (        6calls)     Concatenate: concatenate rules for inputs::ImplicitGlobal 372
       0s000003us (        2calls)     FlatMap: (inputs::LetDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::LetDecl) /*join*/ 463
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::New 572
       0s000003us (        5calls)     Concatenate: concatenate rules for inputs::EveryScope 112
       0s000002us (        2calls)     FlatMap: arrange inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}) by (body, file) 1219
       0s000002us (        3calls)     Consolidate: consolidate 78 2230
       0s000002us (        6calls)     Concatenate: 653
       0s000002us (        3calls)     Consolidate: consolidate 66 2220
       0s000002us (        6calls)     Concatenate: 177
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::BinOp 44
       0s000002us (        2calls)     FlatMap: head of scopes::ScopeOfId(.id=ast::AnyIdFile{.file=id}, .file=id, .scope=scope) :- inputs::File(.id=id, .kind=_, .top_level_scope=scope, .config=_). 898
       0s000002us (        3calls)     Consolidate: consolidate 75 2210
       0s000002us (        6calls)     Concatenate: 2118
       0s000002us (        4calls)     Concatenate: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope) 883
       0s000002us (        2calls)     FlatMap: (inputs::File{.id=(_0: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 164
       0s000002us (        2calls)     FlatMap: (inputs::Arrow{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .body=(ddlog_std::Some{.x=((_: ddlog_std::Either<ast::ExprId,ast::StmtId>), (_: ast::ScopeId))}: ddlog_std::Option<(ddlog_std::Either<ast::ExprId,ast::StmtId>, ast::ScopeId)>)}: inputs::Arrow) /*join*/ 18
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::If 369
       0s000002us (        2calls)     Map: global (outputs::no_undef::ChainedWith{.object=(_: ast::ExprId), .property=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::no_undef::ChainedWith) /*antijoin*/ 295
       0s000002us (        2calls)     Map: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 586
       0s000002us (        2calls)     FlatMap: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*join*/ 574
       0s000002us (        2calls)     FlatMap: head of __Prefix_7[(file, config)] :- inputs::File(.id=file, .kind=_, .top_level_scope=_, .config=config), (config::no_undef_enabled(config)). 199
       0s000002us (        2calls)     FlatMap: head of outputs::no_unused_labels::__Prefix_6[(file, config)] :- inputs::File(.id=file, .kind=_, .top_level_scope=_, .config=config), (config::no_unused_labels_enabled(config)). 323
       0s000002us (        3calls)     Consolidate: consolidate 79 2200
       0s000002us (        2calls)     FlatMap: (inputs::Try{.stmt_id=(_: ast::StmtId), .file=(_1: ast::FileId), .body=(_: ddlog_std::Option<ast::StmtId>), .handler=(ast::TryHandler{.error=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: ast::TryHandler), .finalizer=(_: ddlog_std::Option<ast::StmtId>)}: inputs::Try) /*join*/ 935
       0s000002us (        2calls)     FlatMap: (inputs::BracketAccess{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .prop=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::BracketAccess) /*join*/ 49
       0s000002us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config)) /*join*/ 182
       0s000002us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config)) /*join*/ 326
       0s000002us (        6calls)     Concatenate: 321
       0s000002us (        5calls)     Concatenate: 824
       0s000002us (        2calls)     Map: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1744
       0s000002us (        5calls)     Concatenate: 2014
       0s000002us (        2calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::New(.expr_id=expr, .file=file, .object=ddlog_std::Some{.x=object}, .args=_) by (expr, file) 596
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::ArrowParam 23
       0s000002us (        4calls)     Concatenate: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) 1838
       0s000002us (        6calls)     Concatenate: 197
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::Template 924
       0s000002us (        2calls)     FlatMap: inputs::Try(.stmt_id=stmt, .file=file, .body=_, .handler=ast::TryHandler{.error=ddlog_std::Some{.x=error}, .body=ddlog_std::Some{.x=body}}, .finalizer=_), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(error))) 1200
       0s000002us (        1calls)     Arrange: (scopes::NeedsScopeParents{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeParents) /*join*/ 2036
       0s000002us (        6calls)     Concatenate: 187
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::Break 54
       0s000002us (        5calls)     Concatenate: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)) 2164
       0s000002us (        2calls)     FlatMap: (inputs::File{.id=_0, .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 172
       0s000002us (        2calls)     FlatMap: ((_1: ast::FileId), (_: config::Config), (_: ast::ExprId), (_0: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 604
       0s000002us (        2calls)     FlatMap: head of __Prefix_4[(file, config)] :- inputs::File(.id=file, .kind=_, .top_level_scope=_, .config=config), ((config::no_undef_enabled(config)) or (config::no_typeof_undef_enabled(config))). 179
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::ImportDecl 379
       0s000002us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config)) /*join*/ 316
       0s000002us (        2calls)     FlatMap: head of scopes::ScopeOfId(.id=ast::AnyIdClass{.class=id}, .file=file, .scope=scope) :- inputs::Class(.id=id, .file=file, .name=_, .parent=_, .elements=_, .scope=scope, .exported=_). 904
       0s000002us (        2calls)     FlatMap: head of __Prefix_8[(file, config)] :- inputs::File(.id=file, .kind=_, .top_level_scope=_, .config=config), (config::no_shadow_enabled(config)). 313
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::Return 631
       0s000002us (        2calls)     FlatMap: (inputs::UnaryOp{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .op=(ddlog_std::Some{.x=(ast::UnaryTypeof{}: ast::UnaryOperand)}: ddlog_std::Option<ast::UnaryOperand>), .expr=(ddlog_std::Some{.x=(_: ast::ExprId)}: ddlog_std::Option<ast::ExprId>)}: inputs::UnaryOp) /*join*/ 942
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::ExprString 128
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::BracketAccess 47
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::UnaryOp 940
       0s000002us (        2calls)     FlatMap: (inputs::New{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .object=(ddlog_std::Some{.x=(_1: ast::ExprId)}: ddlog_std::Option<ast::ExprId>), .args=(_: ddlog_std::Option<ddlog_std::Vec<ast::ExprId>>)}: inputs::New) /*antijoin*/ 578
       0s000002us (        2calls)     FlatMap: head of is_exported::IsExported(.file=file, .id=ast::AnyIdClass{.class=id}) :- inputs::Class(.id=id, .file=file, .name=_, .parent=_, .elements=_, .scope=_, .exported=true). 1715
       0s000002us (        2calls)     MapInPlace: __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_) 1906
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::DotAccess 105
       0s000002us (        5calls)     Concatenate: concatenate rules for inputs::Try 933
       0s000001us (        5calls)     Concatenate: 446
       0s000001us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span), (_1: internment::Intern<string>)) /*join*/ 623
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::DoWhile 102
       0s000001us (        5calls)     Concatenate: 2148
       0s000001us (        6calls)     Concatenate: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1650
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::ExprBool 122
       0s000001us (        4calls)     Concatenate: concatenate rules for config::EnableNoUnusedVars 2
       0s000001us (        4calls)     Concatenate: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1074
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::Switch 918
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::Call 61
       0s000001us (        2calls)     FlatMap: (inputs::File{.id=(_: ast::FileId), .kind=(_: ast::FileKind), .top_level_scope=(_: ast::ScopeId), .config=(_: config::Config)}: inputs::File) /*join*/ 168
       0s000001us (        2calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::Try(.stmt_id=stmt, .file=file, .body=_, .handler=ast::TryHandler{.error=ddlog_std::Some{.x=error}, .body=ddlog_std::Some{.x=body}}, .finalizer=_), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((ast::bound_vars(error))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdStmt{.stmt=stmt}), (var scope = var_decls::Unhoistable{.scope=stmt_scope}). 1202
       0s000001us (        2calls)     FlatMap: head of is_exported::IsExported(.file=file, .id=ast::AnyIdStmt{.stmt=id}) :- inputs::ConstDecl(.stmt_id=id, .file=file, .pattern=_, .value=_, .exported=true). 1724
       0s000001us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config), (_: ast::ExprId), (_: ast::ExprId), (_: ast::ScopeId), (_: ast::Span)) /*join*/ 608
       0s000001us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config)) /*join*/ 192
       0s000001us (        2calls)     FlatMap: head of is_exported::IsExported(.file=file, .id=ast::AnyIdStmt{.stmt=id}) :- inputs::LetDecl(.stmt_id=id, .file=file, .pattern=_, .value=_, .exported=true). 1721
       0s000001us (        2calls)     AsCollection: 2284
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::ExprNumber 125
       0s000001us (        6calls)     Concatenate: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1695
       0s000001us (        2calls)     FlatMap: head of __Prefix_5[(file, config)] :- inputs::File(.id=file, .kind=_, .top_level_scope=_, .config=config), (config::no_use_before_def_enabled(config)). 189
       0s000001us (        5calls)     Concatenate: 867
       0s000001us (        2calls)     FlatMap: ((_0: ast::FileId), (_: config::Config)) /*join*/ 202
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::Throw 930
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::UserGlobal 1092
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::For 334
       0s000001us (        4calls)     Concatenate: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) 1771
       0s000001us (        5calls)     Concatenate: concatenate rules for inputs::Ternary 927
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::With 2026
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::ExprBigInt 119
       0s000001us (        4calls)     Concatenate: 1755
       0s000001us (        4calls)     Concatenate: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared) 1816
       0s000001us (        5calls)     Probe: 2286
       0s000001us (        4calls)     Concatenate: 1353
       0s000001us (        4calls)     Probe: probe 72 2186
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::Yield 2029
       0s000001us (        4calls)     Input: 1
       0s000001us (        4calls)     Concatenate: concatenate rules for inputs::FunctionArg 362
       0s000000us (        3calls)     Concatenate: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared) 1787
       0s000000us (        4calls)     Concatenate: 1665
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::InlineFunc 386
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::ForIn 337
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::Label 435
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::FileExport 331
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::InlineFuncParam 405
       0s000000us (        4calls)     Input: 929
       0s000000us (        3calls)     Concatenate: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared) 1854
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::ForOf 340
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::VarDecl 1099
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::Await 41
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::ClassExpr 79
       0s000000us (        4calls)     Probe: probe 71 2196
       0s000000us (        4calls)     Probe: 2298
       0s000000us (        3calls)     Probe: probe 79 2206
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::Function 343
       0s000000us (        4calls)     Input: 1098
       0s000000us (        4calls)     Concatenate: concatenate rules for inputs::Continue 95
       0s000000us (        4calls)     Input: 330
       0s000000us (        4calls)     Input: 627
       0s000000us (        4calls)     Input: 2028
       0s000000us (        4calls)     Input: 2022
       0s000000us (        4calls)     Input: 917
       0s000000us (        4calls)     Input: 29
       0s000000us (        4calls)     Input: 630
       0s000000us (        4calls)     Input: 571
       0s000000us (        4calls)     Input: 378
       0s000000us (        4calls)     Input: 404
       0s000000us (        4calls)     Input: 121
       0s000000us (        4calls)     Input: 161
       0s000000us (        4calls)     Input: 2025
       0s000000us (        4calls)     Input: 1091
       0s000000us (        3calls)     Probe: 2290
       0s000000us (        4calls)     Input: 385
       0s000000us (        4calls)     Input: 333
       0s000000us (        4calls)     Input: 411
       0s000000us (        4calls)     Input: 40
       0s000000us (        4calls)     Input: 368
       0s000000us (        3calls)     Probe: probe 66 2226
       0s000000us (        4calls)     Input: 926
       0s000000us (        4calls)     Input: 633
       0s000000us (        4calls)     Input: 22
       0s000000us (        4calls)     Input: 60
       0s000000us (        3calls)     Probe: probe 69 2246
       0s000000us (        4calls)     Input: 336
       0s000000us (        4calls)     Input: 339
       0s000000us (        4calls)     Input: 920
       0s000000us (        3calls)     Probe: 2270
       0s000000us (        4calls)     Input: 43
       0s000000us (        4calls)     Input: 467
       0s000000us (        4calls)     Input: 460
       0s000000us (        4calls)     Input: 434
       0s000000us (        4calls)     Input: 932
       0s000000us (        4calls)     Input: 130
       0s000000us (        4calls)     Input: 361
       0s000000us (        3calls)     Probe: probe 78 2236
       0s000000us (        4calls)     Input: 53
       0s000000us (        4calls)     Input: 78
       0s000000us (        4calls)     Input: 101
       0s000000us (        4calls)     Input: 127
       0s000000us (        4calls)     Input: 342
       0s000000us (        4calls)     Input: 94
       0s000000us (        4calls)     Input: 67
       0s000000us (        3calls)     Probe: probe 75 2216
       0s000000us (        4calls)     Input: 371
       0s000000us (        4calls)     Input: 118
       0s000000us (        4calls)     Input: 8
       0s000000us (        4calls)     Input: 46
       0s000000us (        4calls)     Input: 939
       0s000000us (        4calls)     Input: 923
       0s000000us (        1calls)     Concatenate: concatenate rules for scopes::NeedsScopeParents 2032
       0s000000us (        4calls)     Input: 104
       0s000000us (        4calls)     Input: 124
       0s000000us (        4calls)     Input: 111
       0s000000us (        4calls)     Input: 87
       0s000000us (        4calls)     Input: 11
       0s000000us (        0calls)     Map: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared) 1790
       0s000000us (        0calls)     Map: consolidate 72 2178
       0s000000us (        0calls)     AsCollection: 2288
       0s000000us (        0calls)     FlatMap: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope), (ddlog_std::Some{.x=ast::Spanned{.data=var name, .span=_}} = (utils::or_else(export_alias, export_name))), name_in_scope::NameInScope(.file=file, .name=name, .scope=export_scope, .declared=id) by (file, name, id) 1734
       0s000000us (        0calls)     FlatMap: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_) by (class, file) 1988
       0s000000us (        0calls)     Map: consolidate 66 2218
       0s000000us (        0calls)     AsCollection: consolidate 66 2222
       0s000000us (        0calls)     Input: 196
       0s000000us (        0calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))) by (file, name, scope) 1639
       0s000000us (        0calls)     FlatMap: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 396
       0s000000us (        0calls)     Input: 866
       0s000000us (        0calls)     Input: 895
       0s000000us (        0calls)     Map: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1653
       0s000000us (        0calls)     FlatMap: arrange __Prefix_8[(file, config)], outputs::no_shadow::ScopeOfDecl(.file=file, .scope=shadowed_scope, .declared=shadowed_id), var_decls::VariableDeclarations(.file=file, .name=name, .scope=shadowed_scope_raw, .declared_in=shadowed_id, .meta=(&var_decls::VariableMeta{.is_function_argument=_, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=shadowed_span}})), outputs::no_shadow::DeclarationInDescendent(.file=file, .scope=shadowed_scope, .name=name, .id=shadower_id), (shadowed_id != shadower_id) by (file, name, shadower_id) 1372
       0s000000us (        0calls)     AsCollection: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1514
       0s000000us (        0calls)     FlatMap: (inputs::Function{.id=(_: ast::FuncId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 345
       0s000000us (        0calls)     Input: 590
       0s000000us (        0calls)     FlatMap: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=_1, .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*semijoin*/ 848
       0s000000us (        0calls)     FlatMap: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*join*/ 1087
       0s000000us (        0calls)     MapInPlace: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared) 1814
       0s000000us (        0calls)     Map: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared) 1819
       0s000000us (        0calls)     FlatMap: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 349
       0s000000us (        0calls)     Input: 1105
       0s000000us (        0calls)     AsCollection: consolidate 71 2192
       0s000000us (        0calls)     FlatMap: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_0: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 388
       0s000000us (        0calls)     MapInPlace: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file) 1585
       0s000000us (        0calls)     Map: 1011
       0s000000us (        0calls)     MapInPlace: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file) 1601
       0s000000us (        0calls)     FlatMap: head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared). 1792
       0s000000us (        0calls)     AsCollection: consolidate 79 2202
       0s000000us (        0calls)     FlatMap: head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared). 1859
       0s000000us (        0calls)     AsCollection: 2268
       0s000000us (        0calls)     Map: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1077
       0s000000us (        0calls)     FlatMap: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Break(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 829
       0s000000us (        0calls)     FlatMap: head of outputs::typeof_undef::TypeofUndef(.whole_expr=whole_expr, .undefined_expr=undefined_expr, .file=file) :- __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_). 1700
       0s000000us (        0calls)     MapInPlace: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1648
       0s000000us (        0calls)     MapInPlace: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared) 1785
       0s000000us (        0calls)     FlatMap: (inputs::Function{.id=(_: ast::FuncId), .file=(_1: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_0: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 353
       0s000000us (        0calls)     FlatMap: head of outputs::no_unused_labels::NoUnusedLabels(.stmt_id=stmt, .file=file, .label_name=name) :- outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)). 2169
       0s000000us (        0calls)     Input: 1754
       0s000000us (        0calls)     Input: 2038
       0s000000us (        0calls)     FlatMap: (config::EnableNoUnusedVars{.file=(_0: ast::FileId), .config=(_: ddlog_std::Ref<config::NoUnusedVarsConfig>)}: config::EnableNoUnusedVars) /*join*/ 4
       0s000000us (        0calls)     Map: outputs::unused_vars::UnusedVariables.threshold_total 1862
       0s000000us (        0calls)     FlatMap: arrange __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file) by (file, name, scope) 1684
       0s000000us (        0calls)     FlatMap: (scopes::NeedsScopeChildren{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeChildren) /*join*/ 891
       0s000000us (        0calls)     AsCollection: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared) 1809
       0s000000us (        0calls)     Input: 2013
       0s000000us (        0calls)     Map: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=_1, .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*semijoin*/ 850
       0s000000us (        0calls)     Input: 947
       0s000000us (        0calls)     Map: outputs::no_shadow::NoShadow.threshold_total 1380
       0s000000us (        0calls)     Input: 1386
       0s000000us (        0calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::Call(.expr_id=expr, .file=file, .callee=ddlog_std::Some{.x=callee}, .args=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=used_scope, .span=used_in), inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdFunc{.func=func})) by (func, file) 1970
       0s000000us (        0calls)     InspectBatch: inspect 75 2214
       0s000000us (        0calls)     FlatMap: (inputs::UserGlobal{.id=(_: ast::GlobalId), .file=(_0: ast::FileId), .name=(_: internment::Intern<string>), .privileges=(_: ast::GlobalPriv)}: inputs::UserGlobal) /*join*/ 1094
       0s000000us (        0calls)     Map: 1014
       0s000000us (        0calls)     InspectBatch: inspect 79 2204
       0s000000us (        0calls)     Map: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1064
       0s000000us (        0calls)     AsCollection: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) 1831
       0s000000us (        0calls)     AsCollection: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared) 1847
       0s000000us (        0calls)     Map: consolidate 79 2198
       0s000000us (        0calls)     MapInPlace: __Prefix_7[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), not outputs::typeof_undef::WithinTypeofExpr(.type_of=_, .expr=expr, .file=file), not outputs::no_undef::ChainedWith(.object=_, .property=expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1617
       0s000000us (        0calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), scopes::FunctionLevelScope(.scope=stmt_scope, .nearest=nearest_scope, .file=file, .id=_), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdStmt{.stmt=stmt}), (var scope = var_decls::Hoistable{.hoisted=nearest_scope, .unhoisted=stmt_scope}). 1155
       0s000000us (        0calls)     FlatMap: head of is_exported::IsExported(.file=file, .id=ast::AnyIdFunc{.func=id}) :- inputs::Function(.id=id, .file=file, .name=_, .scope=_, .body=_, .exported=true). 1712
       0s000000us (        0calls)     Map: consolidate 69 2238
       0s000000us (        0calls)     Input: 320
       0s000000us (        0calls)     FlatMap: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope) by (file, name, scope) 872
       0s000000us (        0calls)     Map: (outputs::no_unused_labels::UsedLabels{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .label_name=_2}: outputs::no_unused_labels::UsedLabels) /*antijoin*/ 2143
       0s000000us (        0calls)     Map: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1072
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope) by (file, name, body_scope, declared) 1805
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::hoisted_scope(scope)), declared) 1776
       0s000000us (        0calls)     Map: (inputs::ClassExpr{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>)}: inputs::ClassExpr) /*semijoin*/ 83
       0s000000us (        0calls)     FlatMap: (inputs::InlineFunc{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 400
       0s000000us (        0calls)     Map: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)) 2167
       0s000000us (        0calls)     FlatMap: (inputs::InlineFunc{.expr_id=(_: ast::ExprId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(ddlog_std::Some{.x=(_0: ast::StmtId)}: ddlog_std::Option<ast::StmtId>)}: inputs::InlineFunc) /*join*/ 392
       0s000000us (        0calls)     AsCollection: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1525
       0s000000us (        0calls)     FlatMap: (inputs::Function{.id=(_0: ast::FuncId), .file=(_1: ast::FileId), .name=(_: ddlog_std::Option<ast::Spanned<ast::Name>>), .scope=(_: ast::ScopeId), .body=(_: ast::ScopeId), .exported=(_: bool)}: inputs::Function) /*join*/ 357
       0s000000us (        0calls)     FlatMap: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})), variable_decl::VariableDecl(.stmt=decl, .file=file, .kind=_, .pattern=_, .value=ddlog_std::Some{.x=class}, .exported=_), inputs::ClassExpr(.expr_id=class, .file=file, .elements=_) by (class, file) 1995
       0s000000us (        0calls)     FlatMap: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(_: ast::Spanned<ast::Name>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 437
       0s000000us (        0calls)     Input: 946
       0s000000us (        0calls)     FlatMap: (scopes::NeedsScopeParents{.scope=(_0: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::NeedsScopeParents) /*join*/ 2034
       0s000000us (        0calls)     AsCollection: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::hoisted_scope(scope)), .declared=declared) 1780
       0s000000us (        0calls)     Input: 612
       0s000000us (        0calls)     Input: 1884
       0s000000us (        0calls)     InspectBatch: inspect 72 2184
       0s000000us (        0calls)     FlatMap: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_) by (stmt, file, (name.data)) 2153
       0s000000us (        0calls)     Map: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared) 1857
       0s000000us (        0calls)     FlatMap: (inputs::VarDecl{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .pattern=(ddlog_std::Some{.x=(_: internment::Intern<ast::Pattern>)}: ddlog_std::Option<ast::IPattern>), .value=(_: ddlog_std::Option<ast::ExprId>), .exported=(_: bool)}: inputs::VarDecl) /*join*/ 1101
       0s000000us (        0calls)     MapInPlace: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) 1836
       0s000000us (        0calls)     MapInPlace: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared), not name_in_scope::NameInScope(.file=file, .name=name, .scope=(var_decls::unhoisted_scope(scope)), .declared=declared) 1852
       0s000000us (        0calls)     FlatMap: arrange __Prefix_1[(file, config, expr, object, used_scope, used_in)], inputs::NameRef(.expr_id=callee, .file=file, .value=name), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdClass{.class=class})) by (class, file) 1938
       0s000000us (        0calls)     Input: 1267
       0s000000us (        0calls)     FlatMap: arrange inputs::FileExport(.file=file, .export=ast::NamedExport{.name=export_name, .alias=export_alias}, .scope=export_scope) by (file, name, export_scope) 1727
       0s000000us (        0calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps(val))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((vec::flatmap(params, (function(param: ast::FuncParam):ddlog_std::Vec<(ast::Spanned<internment::Intern<string>>, bool)>{(ast::bound_vars(param))})))), ((ast::Spanned{.data=var name, .span=var span}, var implicit) = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=implicit, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdExpr{.expr=expr}), (var scope = var_decls::Unhoistable{.scope=stmt_scope}). 1228
       0s000000us (        0calls)     AsCollection: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) 1764
       0s000000us (        0calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}), inputs::Statement(.id=body, .file=file, .kind=_, .scope=body_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdExpr{.expr=expr}), (var scope = var_decls::Unhoistable{.scope=body_scope}). 1194
       0s000000us (        0calls)     AsCollection: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope) 876
       0s000000us (        0calls)     FlatMap: global (scopes::ScopeFamily{.parent=(_0: ast::ScopeId), .child=(_: ast::ScopeId), .file=(_1: ast::FileId)}: scopes::ScopeFamily) /*join*/ 2109
       0s000000us (        0calls)     Input: 2117
       0s000000us (        0calls)     FlatMap: head of outputs::unused_vars::UnusedVariables(.name=name, .declared=declared, .span=span, .file=file) :- config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), outputs::unused_vars::FunctionBodyScope(.file=file, .id=declared, .body=body_scope), not name_in_scope::NameInScope(.file=file, .name=name, .scope=body_scope, .declared=declared). 1821
       0s000000us (        0calls)     Input: 186
       0s000000us (        0calls)     MapInPlace: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)) 2162
       0s000000us (        0calls)     FlatMap: inputs::FunctionArg(.parent_func=func, .file=file, .pattern=pat, .implicit=implicit), inputs::Function(.id=func, .file=file, .name=_, .scope=_, .body=body, .exported=_), var bound = FlatMap((ast::bound_vars(pat))) 1165
       0s000000us (        0calls)     Map: outputs::typeof_undef::TypeofUndef.threshold_total 1703
       0s000000us (        0calls)     FlatMap: head of variable_decl::VariableDecl(.stmt=stmt, .file=file, .kind=variable_decl::VarDeclVar{}, .pattern=pattern, .value=value, .exported=exported) :- inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=pattern, .value=value, .exported=exported). 1871
       0s000000us (        0calls)     FlatMap: ((_0: ast::FileId), (_: config::Config), (_: ast::StmtId), ((ast::Spanned{.data=_1, .span=_}: ast::Spanned{data: ast::Name, span: ast::Span}): ast::Spanned<ast::Name>), (_2: ast::ScopeId)) /*join*/ 452
       0s000000us (        0calls)     Input: 206
       0s000000us (        0calls)     FlatMap: global (scopes::ScopeFamily{.parent=_0, .child=(_: ast::ScopeId), .file=_1}: scopes::ScopeFamily) /*join*/ 2113
       0s000000us (        0calls)     Input: 652
       0s000000us (        0calls)     FlatMap: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1062
       0s000000us (        0calls)     Input: 1664
       0s000000us (        0calls)     AsCollection: consolidate 72 2182
       0s000000us (        0calls)     AsCollection: consolidate 75 2212
       0s000000us (        0calls)     InspectBatch: inspect 69 2244
       0s000000us (        0calls)     Input: 310
       0s000000us (        0calls)     FlatMap: head of scopes::ScopeOfId(.id=ast::AnyIdFunc{.func=id}, .file=file, .scope=scope) :- inputs::Function(.id=id, .file=file, .name=_, .scope=scope, .body=_, .exported=_). 901
       0s000000us (        0calls)     FlatMap: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))) 1637
       0s000000us (        0calls)     Map: 2083
       0s000000us (        0calls)     Input: 478
       0s000000us (        0calls)     FlatMap: ((_1: ast::FileId), (_: config::Config), (_: ast::StmtId), (_: ast::Spanned<ast::Name>), (_0: ast::ScopeId)) /*join*/ 456
       0s000000us (        0calls)     Map: outputs::no_unused_labels::UsedLabels.threshold_total 2135
       0s000000us (        0calls)     Map: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1083
       0s000000us (        0calls)     Input: 2147
       0s000000us (        0calls)     AsCollection: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=stmt, .file=file, .name=ddlog_std::Some{.x=name}, .body=_, .body_scope=_), not outputs::no_unused_labels::UsedLabels(.stmt_id=stmt, .file=file, .label_name=(name.data)) 2157
       0s000000us (        0calls)     FlatMap: (inputs::InlineFuncParam{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .param=(_: internment::Intern<ast::Pattern>)}: inputs::InlineFuncParam) /*join*/ 407
       0s000000us (        0calls)     FlatMap: inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}), inputs::Statement(.id=body, .file=file, .kind=_, .scope=body_scope, .span=_), var bound = FlatMap((ast::bound_vars(pat))) 1192
       0s000000us (        0calls)     InspectBatch: inspect 71 2194
       0s000000us (        0calls)     InspectBatch: inspect 66 2224
       0s000000us (        0calls)     FlatMap: head of outputs::no_undef::NoUndef(.name=name, .scope=scope, .span=span, .file=file) :- __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_). 1655
       0s000000us (        0calls)     Map: (is_exported::IsExported{.file=(_0: ast::FileId), .id=(_1: ast::AnyId)}: is_exported::IsExported) /*antijoin*/ 1750
       0s000000us (        0calls)     FlatMap: arrange outputs::no_unused_labels::__Prefix_3[(file, config, stmt, name, body_scope)], scopes::ScopeFamily(.parent=body_scope, .child=child_scope, .file=file) by (file, (name.data), child_scope) 2127
       0s000000us (        0calls)     FlatMap: (inputs::FunctionArg{.parent_func=(_0: ast::FuncId), .file=(_1: ast::FileId), .pattern=(_: internment::Intern<ast::Pattern>), .implicit=(_: bool)}: inputs::FunctionArg) /*join*/ 364
       0s000000us (        0calls)     FlatMap: head of var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=id, .meta=meta) :- inputs::FunctionArg(.parent_func=func, .file=file, .pattern=pat, .implicit=implicit), inputs::Function(.id=func, .file=file, .name=_, .scope=_, .body=body, .exported=_), var bound = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound), (var meta = (ddlog_std::ref_new(var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=implicit, .declaration_span=ddlog_std::Some{.x=span}}))), (var id = ast::AnyIdFunc{.func=func}), (var scope = var_decls::Unhoistable{.scope=body}). 1167
       0s000000us (        0calls)     Input: 1407
       0s000000us (        0calls)     Map: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) 1841
       0s000000us (        0calls)     FlatMap: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 854
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), not is_exported::IsExported(.file=file, .id=declared) by (file, name, (var_decls::unhoisted_scope(scope)), declared) 1843
       0s000000us (        0calls)     FlatMap: (inputs::Label{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .name=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>), .body=(_: ddlog_std::Option<ast::StmtId>), .body_scope=(_: ast::ScopeId)}: inputs::Label) /*join*/ 441
       0s000000us (        0calls)     Input: 1352
       0s000000us (        0calls)     MapInPlace: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope) 881
       0s000000us (        0calls)     FlatMap: arrange __Prefix_5[(file, config)], inputs::NameRef(.expr_id=expr, .file=file, .value=name), inputs::Expression(.id=expr, .file=file, .kind=ast::ExprNameRef{}, .scope=used_scope, .span=used_in), not inputs::New(.expr_id=_, .file=file, .object=ddlog_std::Some{.x=expr}, .args=_), name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=stmt})) by (stmt, file) 1920
       0s000000us (        0calls)     Map: outputs::no_unused_labels::NoUnusedLabels.threshold_total 2172
       0s000000us (        0calls)     InspectBatch: inspect 78 2234
       0s000000us (        0calls)     Map: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) 1774
       0s000000us (        0calls)     Map: outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope) 886
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))) by (file, declared) 1760
       0s000000us (        0calls)     AsCollection: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1081
       0s000000us (        0calls)     Input: 2031
       0s000000us (        0calls)     FlatMap: (outputs::no_unused_labels::UsedLabels{.stmt_id=(_0: ast::StmtId), .file=(_1: ast::FileId), .label_name=_2}: outputs::no_unused_labels::UsedLabels) /*antijoin*/ 2141
       0s000000us (        0calls)     AsCollection: consolidate 69 2242
       0s000000us (        0calls)     FlatMap: arrange inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_) by (stmt_scope, file) 1146
       0s000000us (        0calls)     Map: consolidate 78 2228
       0s000000us (        0calls)     Map: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 856
       0s000000us (        0calls)     FlatMap: inputs::VarDecl(.stmt_id=stmt, .file=file, .pattern=ddlog_std::Some{.x=pat}, .value=_, .exported=_), inputs::Statement(.id=stmt, .file=file, .kind=_, .scope=stmt_scope, .span=_), scopes::FunctionLevelScope(.scope=stmt_scope, .nearest=nearest_scope, .file=file, .id=_), var bound = FlatMap((ast::bound_vars(pat))) 1153
       0s000000us (        0calls)     MapInPlace: config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))), (not (ast::is_global(declared))), not is_exported::IsExported(.file=file, .id=declared) 1769
       0s000000us (        0calls)     FlatMap: head of scopes::NeedsScopeChildren(.scope=scope, .file=file) :- outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Label(.stmt_id=_, .file=file, .name=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}, .body=_, .body_scope=scope), not outputs::no_unused_labels::LabelUsage(.stmt=_, .file=file, .label_name=name, .scope=scope). 888
       0s000000us (        0calls)     FlatMap: arrange __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_) by (expr, file) 1630
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=scope, .declared_in=(declared@ ast::AnyIdGlobal{.global=_}), .meta=(&var_decls::VariableMeta{.is_function_argument=false, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1827
       0s000000us (        0calls)     Map: outputs::use_before_def::UseBeforeDef.threshold_total 2007
       0s000000us (        0calls)     FlatMap: arrange __Prefix_0[(file, config, expr, object, used_scope, used_in, name)], name_in_scope::NameInScope(.file=file, .name=name, .scope=used_scope, .declared=(declared@ ast::AnyIdStmt{.stmt=decl})) by (decl, file) 1981
       0s000000us (        0calls)     Map: consolidate 71 2188
       0s000000us (        0calls)     Input: 445
       0s000000us (        0calls)     Map: (outputs::no_unused_labels::LabelUsage{.stmt=(_: ast::StmtId), .file=(_0: ast::FileId), .label_name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId)}: outputs::no_unused_labels::LabelUsage) /*antijoin*/ 862
       0s000000us (        0calls)     FlatMap: head of is_exported::IsExported(.file=file, .id=ast::AnyIdStmt{.stmt=id}) :- inputs::VarDecl(.stmt_id=id, .file=file, .pattern=_, .value=_, .exported=true). 1718
       0s000000us (        0calls)     MapInPlace: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1693
       0s000000us (        0calls)     Input: 1868
       0s000000us (        0calls)     AsCollection: consolidate 78 2232
       0s000000us (        0calls)     AsCollection: 2296
       0s000000us (        0calls)     Input: 1286
       0s000000us (        0calls)     Map: consolidate 75 2208
       0s000000us (        0calls)     Input: 176
       0s000000us (        0calls)     Map: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1698
       0s000000us (        0calls)     FlatMap: head of scopes::IsHoistable(.file=file, .id=ast::AnyIdStmt{.stmt=id}, .hoistable=true) :- inputs::VarDecl(.stmt_id=id, .file=file, .pattern=_, .value=_, .exported=_). 2019
       0s000000us (        0calls)     FlatMap: inputs::Property(.expr_id=expr, .file=file, .key=_, .val=ddlog_std::Some{.x=val}), (ddlog_std::Some{.x=(var params, var body)} = (ast::method_comps(val))), inputs::Statement(.id=body, .file=file, .kind=_, .scope=stmt_scope, .span=_), var bound = FlatMap((vec::flatmap(params, (function(param: ast::FuncParam):ddlog_std::Vec<(ast::Spanned<internment::Intern<string>>, bool)>{(ast::bound_vars(param))})))) 1226
       0s000000us (        0calls)     AsCollection: __Prefix_7[(file, config)], inputs::Assign(.expr_id=expr, .file=file, .lhs=ddlog_std::Some{.x=ddlog_std::Left{.l=pat}}, .rhs=_, .op=_), inputs::Expression(.id=expr, .file=file, .kind=_, .scope=scope, .span=_), var bound_var = FlatMap((ast::bound_vars(pat))), (ast::Spanned{.data=var name, .span=var span} = bound_var), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1643
       0s000000us (        0calls)     AsCollection: global (outputs::typeof_undef::WithinTypeofExpr{.type_of=(_: ast::ExprId), .expr=(_0: ast::ExprId), .file=(_1: ast::FileId)}: outputs::typeof_undef::WithinTypeofExpr) /*antijoin*/ 1070
       0s000000us (        0calls)     Input: 823
       0s000000us (        0calls)     FlatMap: (inputs::Continue{.stmt_id=(_: ast::StmtId), .file=(_0: ast::FileId), .label=(ddlog_std::Some{.x=(ast::Spanned{.data=(_: internment::Intern<string>), .span=(_: ast::Span)}: ast::Spanned<internment::Intern<string>>)}: ddlog_std::Option<ast::Spanned<ast::Name>>)}: inputs::Continue) /*join*/ 97
       0s000000us (        0calls)     AsCollection: __Prefix_4[(file, config)], inputs::NameRef(.expr_id=undefined_expr, .file=file, .value=name), inputs::Expression(.id=undefined_expr, .file=file, .kind=ast::ExprNameRef{}, .scope=scope, .span=span), outputs::typeof_undef::WithinTypeofExpr(.type_of=whole_expr, .expr=undefined_expr, .file=file), not name_in_scope::NameInScope(.file=file, .name=name, .scope=scope, .declared=_) 1688
       0s000000us (        0calls)     FlatMap: head of scopes::IsHoistable(.file=file, .id=ast::AnyIdFunc{.func=id}, .hoistable=true) :- inputs::Function(.id=id, .file=file, .name=_, .scope=_, .body=_, .exported=_). 2016
       0s000000us (        0calls)     FlatMap: arrange outputs::no_unused_labels::__Prefix_6[(file, config)], inputs::Continue(.stmt_id=stmt, .file=file, .label=ddlog_std::Some{.x=ast::Spanned{.data=name, .span=_}}) by (stmt, file) 840
       0s000000us (        0calls)     FlatMap: arrange inputs::InlineFuncParam(.expr_id=expr, .file=file, .param=pat), inputs::InlineFunc(.expr_id=expr, .file=file, .name=_, .body=ddlog_std::Some{.x=body}) by (body, file) 1185
       0s000000us (        0calls)     FlatMap: (outputs::unused_vars::FunctionBodyScope{.file=(_0: ast::FileId), .id=(_1: ast::AnyId), .body=(_: ast::ScopeId)}: outputs::unused_vars::FunctionBodyScope) /*join*/ 674
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), inputs::InlineFunc(.expr_id=id, .file=file, .name=_, .body=ddlog_std::Some{.x=body_id}) by (body_id, file) 666
       0s000000us (        0calls)     FlatMap: arrange config::EnableNoUnusedVars(.file=file, .config=config), var_decls::VariableDeclarations(.file=file, .name=name, .scope=_, .declared_in=declared, .meta=(&var_decls::VariableMeta{.is_function_argument=true, .implicitly_declared=false, .declaration_span=ddlog_std::Some{.x=span}})), (not (regex::regex_set_match((config::ignored_patterns((ddlog_std::deref(config)))), (internment::ival(name))))) by (file, declared) 1798
       0s000000us (        0calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1527
       0s000000us (        0calls)     FlatMap: (inputs::ClassExpr{.expr_id=(_0: ast::ExprId), .file=(_1: ast::FileId), .elements=(_: ddlog_std::Option<ddlog_std::Vec<ast::IClassElement>>)}: inputs::ClassExpr) /*semijoin*/ 81
       0s000000us (        0calls)     Map: global (name_in_scope::NameInScope{.file=(_0: ast::FileId), .name=(_1: internment::Intern<string>), .scope=(_2: ast::ScopeId), .declared=(_: ast::AnyId)}: name_in_scope::NameInScope) /*antijoin*/ 1516
       0s000000us (        0calls)     Input: 1563
       0s000000us (        0calls)     Input: 678
       0s000000us (        0calls)     Input: 1709
